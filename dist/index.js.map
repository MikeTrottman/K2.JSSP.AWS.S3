{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import '@k2oss/k2-broker-core';\n\nmetadata = {\n    \"systemName\": \"AWS-S3-Bucket\",\n    \"displayName\": \"AWS S3 Bucket\",\n    \"description\": \"Connect to your Amazon Web Services S3 Bucket.\",\n    \"configuration\": {\n        \"AWSRegion\": {\n            displayName: \"AWS Region\",\n            type: \"string\",\n            required: true\n        },\n        \"AWSBucketName\": {\n            displayName: \"AWS Bucket Name\",\n            type: \"string\",\n            required: true\n        },\n        \"AWSAccessKey\": {\n            displayName: \"AWS IAM User Access Key\",\n            type: \"string\",\n            required: true\n        },\n        \"AWSSecretKey\": {\n            displayName: \"AWS IAM User Secret Key\",\n            type: \"string\",\n            required: true\n        }\n    }\n};\n\nondescribe = async function ({configuration}): Promise<void> {\n    postSchema({\n        objects: {\n            \"bucket\": {\n                displayName: \"Bucket\",\n                description: \"Get S3 Bucket Contents\",\n                properties: {\n                    \"key\": {\n                        displayName: \"Key\",\n                        type: \"string\",\n                    },\n                    \"lastModified\": {\n                        displayName: \"Last Modified\",\n                        type: \"dateTime\"\n                    },\n                    \"eTag\": {\n                        displayName: \"Etag\",\n                        type: \"string\"\n                    },\n                    \"size\": {\n                        displayName: \"Size\",\n                        type: \"number\"\n                    },\n                    \"storageClass\": {\n                        displayName: \"Storage Class\",\n                        type: \"number\"\n                    }\n                },\n                methods: {\n                    \"getList\": {\n                        displayName: \"Get List of Bucket Contents\",\n                        type: \"list\",\n                        inputs: [\"prefix\", \"max-keys\", \"start-after\"],\n                        outputs: [\"key\", \"lastModified\", \"eTag\", \"size\", \"storageClass\"]\n                    }\n                }\n            },\n            \"file\": {\n                displayName: \"File\",\n                description: \"Manages Files on AWS S3\",\n                properties: {\n                    \"fileName\": {\n                        displayName: \"File Name\",\n                        type: \"string\"\n                    },\n                    \"size\": {\n                        displayName: \"File Size\",\n                        type: \"string\"\n                    },\n                    \"contentType\": {\n                        displayName: \"Content Type\",\n                        type: \"string\"\n                    },\n                    \"content\": {\n                        displayName: \"File Content\",\n                        type: \"attachment\"\n                    }\n                },\n                methods: {\n                    \"getFile\": {\n                        displayName: \"Get File\",\n                        type: \"read\",\n                        inputs: [ \"fileName\" ],\n                        requiredInputs: [\"fileName\"],\n                        outputs: [ \"fileName\", \"size\", \"contentType\", \"content\" ]\n                    }\n                }\n            }\n        }\n    }\n    )\n};\n\nonexecute = async function ({objectName, methodName, parameters, properties, configuration}): Promise<void> {\n    try{\n        switch (objectName) {\n            case \"bucket\": await onexecuteBucket(methodName, parameters, properties, configuration); break;\n            case \"file\": await onexecuteFile(methodName, properties, parameters); break;\n            default: throw new Error(\"The object \" + objectName + \" is not supported.\");\n        }\n    }\n    catch (e){\n        throw new Error(\"Stacktrace: \" + e.stack);\n    }\n}\n\nasync function onexecuteBucket(methodName: string, parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    try{\n        switch (methodName) {\n            case \"getList\": await onexecuteBucketGetList(parameters, properties, configuration); break;\n            default: throw new Error(\"The method \" + methodName + \" is not supported.\");\n        }\n    }\n    catch (e){\n        throw new Error(\"Stacktrace: \" + e.stack);\n    }\n}\n\nasync function onexecuteFile(methodName: string, properties: SingleRecord, parameters: SingleRecord): Promise<void> {\n    try{\n        switch (methodName)\n        {\n            case \"getFile\": await onexecuteGetFile(parameters, properties); break;\n            default: throw new Error(\"The method \" + methodName + \" is not supported.\");\n        }\n    }\n    catch (e){\n        throw new Error(\"Stacktrace: \" + e.stack);\n    }\n}\n\nfunction onexecuteBucketGetList(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n        try{\n            var xhr = new XMLHttpRequest();\n            xhr.withCredentials = true;\n            console.log('After xhr request is created');\n        }\n        catch (e){\n            console.log(\"Stacktrace: \" + e.stack);\n        }\n\n        xhr.onreadystatechange = function () {\n            try {\n                if (xhr.readyState !== 4) return;\n                if (xhr.status !== 200) throw new Error(\"Failed with status \" + xhr.status);\n\n                //console.log(xhr.responseText);\n                var obj = JSON.parse(xhr.responseText);\n                postResult(obj.map(x => {\n                    return {\n                        \"key\": x.ListBucketResult.Contents.Key,\n                        \"lastModified\": x.ListBucketResult.Contents.LastModified,\n                        \"etag\": x.ListBucketResult.Contents.Etag,\n                        \"size\": x.ListBucketResult.Contents.Size,\n                        \"storageClass\": x.ListBucketResult.Contents.StorageClass\n                    }\n                }));\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        }\n\n        var amzDate = getAmzDate(new Date().toISOString());\n        var authDate = amzDate.split(\"T\")[0];\n\n        xhr.open(\"GET\", 'https://' + configuration[\"AWSBucketName\"] + '.s3.' + configuration[\"AWSRegion\"] + '.amazonaws.com?list-type=2&max-keys=50&prefix=Image&start-after=1');\n        \n        xhr.setRequestHeader(\"host\", configuration[\"AWSBucketName\"] + \".s3.amazonaws.com\");\n        xhr.setRequestHeader(\"X-Amz-Content-Sha256\", getPayload(''));\n        xhr.setRequestHeader(\"X-Amz-Date\", amzDate);\n        xhr.setRequestHeader(\"Authorization\", \"AWS4-HMAC-SHA256 Credential=\" + configuration[\"AWSAccessKey\"] + \"/\" + authDate + \"/\" + configuration[\"AWSRegion\"] + \"/s3/aws4_request, SignedHeaders=host;x-amz-content-sha256;x-amz-date, Signature=\" + getSignatureKey(configuration, dateString));\n        xhr.responseType = 'json';\n        \n        xhr.send();\n    });\n\n}\n\nfunction getAmzDate(dateStr) {\n    var chars = [\":\",\"-\"];\n    for (var i=0;i<chars.length;i++) {\n        while (dateStr.indexOf(chars[i]) != -1) {\n            dateStr = dateStr.replace(chars[i],\"\");\n        }\n    }\n    dateStr = dateStr.split(\".\")[0] + \"Z\";\n    return dateStr;\n}\n\nfunction getPayload(payload) {\n    var crypto = require(\"crypto-js\");\n\n    return crypto.SHA256(payload).toString(payload);\n}\n\nfunction getSignatureKey(configuration, dateString) {\n    \n    var crypto = require(\"crypto-js\");\n\n    var kDate = crypto.HmacSHA256(dateString, \"AWS4\" + configuration[\"AWSSecretKey\"]);\n    var kRegion = crypto.HmacSHA256(configuration[\"AWSRegion\"], kDate);\n    var kService = crypto.HmacSHA256('s3', kRegion);\n    var kSigning = crypto.HmacSHA256(\"aws4_request\", kService);\n    return kSigning;\n}\n\nfunction onexecuteGetFile(parameters: SingleRecord, properties: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) =>\n    {\n        console.log('===htk in onexecuteGetFile');\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function() {\n            try {\n                \n                //console.log('=== htk readyState '+ xhr.readyState);\n                //console.log('=== htk status '+ xhr.status);\n\n                if (xhr.readyState !== 4) return;\n                if (xhr.status !== 200) throw new Error(\"Failed with status \" + xhr.status);\n\n                console.log('=== hdr '+xhr.getResponseHeader('Content-Type'));\n                console.log('=== len '+xhr.getResponseHeader('Content-Length'));\n                console.log('===  file '+ xhr.response);\n\n                postResult({\n                    \"fileName\": properties[\"fileName\"],\n                    \"size\": xhr.getResponseHeader('Content-Length'),\n                    \"contentType\": xhr.getResponseHeader('Content-Type'),\n                    \"content\": xhr.response\n                });\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        };\n\n        //xhr.setRequestHeader('test', 'test value');\n        console.log(\"=== fn \"+properties[\"fileName\"]);\n        xhr.open(\"GET\", 'https://k2-public-bucket.s3.us-west-2.amazonaws.com/Images/IDontThinkThatMemes.jpg');\n        xhr.responseType = 'blob';\n\n        xhr.send();\n    });\n}\n\nfunction onexecuteTodoGetWithParams(parameters: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) =>\n    {\n        try {\n            postResult({\n                \"id\": parameters[\"pid\"]\n            });\n            resolve();\n        } catch (e) {\n            reject(e);\n        }\n        \n    });\n}"],"names":["metadata","displayName","type","required","ondescribe","async","configuration","postSchema","objects","description","properties","methods","inputs","outputs","requiredInputs","onexecute","objectName","methodName","parameters","Promise","resolve","reject","xhr","XMLHttpRequest","withCredentials","console","log","e","stack","onreadystatechange","readyState","status","Error","obj","JSON","parse","responseText","postResult","map","x","ListBucketResult","Contents","Key","LastModified","Etag","Size","StorageClass","payload","amzDate","dateStr","chars","i","length","indexOf","replace","split","getAmzDate","Date","toISOString","authDate","open","setRequestHeader","require","SHA256","toString","dateString","crypto","kDate","HmacSHA256","kRegion","kService","getSignatureKey","responseType","send","onexecuteBucketGetList","onexecuteBucket","getResponseHeader","response","onexecuteGetFile","onexecuteFile"],"mappings":"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"}