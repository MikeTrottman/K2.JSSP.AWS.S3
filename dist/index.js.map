{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import '@k2oss/k2-broker-core';\n\nmetadata = {\n    \"systemName\": \"AWS-S3-Bucket\",\n    \"displayName\": \"AWS S3 Bucket\",\n    \"description\": \"Connect to your Amazon Web Services S3 Bucket.\",\n    \"configuration\": {\n        \"AWSRegion\": {\n            displayName: \"AWS Region\",\n            type: \"string\",\n            value: \"us-west-2\",\n            required: true\n        },\n        \"AWSBucketName\": {\n            displayName: \"AWS Bucket Name\",\n            type: \"string\",\n            value: \"s3-bucket-name\",\n            required: true\n        },\n        \"AWSAccessKey\": {\n            displayName: \"AWS IAM User Access Key\",\n            type: \"string\",\n            value: \"IAM User Access Key\",\n            required: true\n        },\n        \"AWSSecretKey\": {\n            displayName: \"AWS IAM User Secret Key\",\n            type: \"string\",\n            value: \"IAM User Secret Key\",\n            required: true\n        }\n    }\n};\n\nondescribe = async function ({configuration}): Promise<void> {\n    postSchema({\n        objects: {\n            \"bucket\": {\n                displayName: \"Bucket\",\n                description: \"Get S3 Bucket Contents\",\n                properties: {\n                    \"key\": {\n                        displayName: \"Key\",\n                        type: \"string\",\n                    },\n                    \"lastModified\": {\n                        displayName: \"Last Modified\",\n                        type: \"dateTime\"\n                    },\n                    \"eTag\": {\n                        displayName: \"Etag\",\n                        type: \"string\"\n                    },\n                    \"size\": {\n                        displayName: \"Size\",\n                        type: \"number\"\n                    },\n                    \"storageClass\": {\n                        displayName: \"Storage Class\",\n                        type: \"number\"\n                    }\n                },\n                methods: {\n                    \"getList\": {\n                        displayName: \"Get List of Bucket Contents\",\n                        type: \"list\",\n                        inputs: [\"prefix\", \"max-keys\", \"start-after\"],\n                        outputs: [\"key\", \"lastModified\", \"eTag\", \"size\", \"storageClass\"]\n                    }\n                }\n            }\n        }\n    }\n    )\n};\n\nonexecute = async function ({objectName, methodName, parameters, properties, configuration}): Promise<void> {\n    switch (objectName) {\n        case \"posts\": await onexecutePosts(methodName, parameters, properties, configuration); break;\n        default: throw new Error(\"The object \" + objectName + \" is not supported.\");\n    }\n}\n\nasync function onexecutePosts(methodName: string, parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    switch (methodName) {\n        case \"getList\": await onexecutePostsGetList(parameters, properties, configuration); break;\n        case \"getById\": await onexecutePostsGetById(parameters, properties, configuration); break;\n        case \"getByUserId\": await onexecutePostsGetByUserId(parameters, properties, configuration); break;\n        case \"create\": await onexecutePostsCreate(parameters, properties, configuration); break;\n        case \"update\": await onexecutePostsUpdate(parameters, properties, configuration); break;\n        case \"delete\": await onexecutePostsDelete(parameters, properties, configuration); break;\n        default: throw new Error(\"The method \" + methodName + \" is not supported.\");\n    }\n}\n\nfunction onexecutePostsGetList(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n        var urlValue = 'https://' + metadata.configuration.AWSBucketName + '.s3.' + metadata.configuration.AWSRegion + '.amazonaws.com?list-type=2';\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function () {\n            try {\n                if (xhr.readyState !== 4) return;\n                if (xhr.status !== 200) throw new Error(\"Failed with status \" + xhr.status);\n\n                //console.log(xhr.responseText);\n                var obj = JSON.parse(xhr.responseText);\n                postResult(obj.map(x => {\n                    return {\n                        \"key\": x.key,\n                        \"lastModified\": x.lastModified,\n                        \"etag\": x.etag,\n                        \"size\": x.size,\n                        \"storageClass\": x.storageClass\n                    }\n                }));\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        }\n\n        xhr.open(\"GET\", urlValue);\n        xhr.send();\n    });\n\n}\n\nfunction onexecutePostsGetById(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n        var urlValue = configuration[\"ServiceURL\"] + 'posts/';\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function () {\n            try {\n                if (xhr.readyState !== 4) return;\n                if (xhr.status !== 200) throw new Error(\"Failed with status \" + xhr.status);\n\n                var obj = JSON.parse(xhr.responseText);\n                postResult({\n                    \"id\": obj.id,\n                    \"userId\": obj.userId,\n                    \"title\": obj.title,\n                    \"body\": obj.body\n                });\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        }\n\n        if(typeof properties[\"id\"] !== \"number\") throw new Error(\"properties[\\\"id\\\"] is not of type number\");\n\n        xhr.open(\"GET\", urlValue + encodeURIComponent(properties[\"id\"]));\n        xhr.send();\n    });\n}\n\nfunction onexecutePostsGetByUserId(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n        var urlValue = configuration[\"ServiceURL\"] + 'posts?userId=';\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function () {\n            try {\n                if (xhr.readyState !== 4) return;\n                if (xhr.status !== 200) throw new Error(\"Failed with status \" + xhr.status);\n\n                var obj = JSON.parse(xhr.responseText);\n                postResult(obj.map(x => {\n                    return {\n                        \"id\": x.id,\n                        \"userId\": x.userId,\n                        \"title\": x.title,\n                        \"body\": x.body\n                    }\n                }));\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n\n        }\n\n        if(typeof properties[\"userId\"] !== \"number\") throw new Error(\"properties[\\\"userId\\\"] is not of type number\");\n        xhr.open(\"GET\", urlValue + encodeURIComponent(properties[\"userId\"]));\n        xhr.send();\n    });\n}\n\n\nfunction onexecutePostsCreate(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n        var urlValue = configuration[\"ServiceURL\"] + 'posts/';\n        var data = JSON.stringify({\n            \"userId\": properties[\"userId\"],\n            \"title\": properties[\"title\"],\n            \"body\": properties[\"body\"]\n        });\n\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function () {\n            try {\n                if (xhr.readyState !== 4) return;\n                // look for 'created' code\n                if (xhr.status !== 201) throw new Error(\"Failed with status \" + xhr.status);\n\n                var obj = JSON.parse(xhr.responseText);\n                postResult({\n                    \"id\": obj.id,\n                    \"userId\": obj.userId,\n                    \"title\": obj.title,\n                    \"body\": obj.body\n                });\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        }\n        xhr.open(\"POST\", urlValue);\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n        xhr.send(data);\n    });\n}\n\nfunction onexecutePostsUpdate(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n        var urlValue = configuration[\"ServiceURL\"] + 'posts/';\n        var data = JSON.stringify({\n            \"userId\": properties[\"userId\"],\n            \"title\": properties[\"title\"],\n            \"body\": properties[\"body\"]\n        });\n\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function () {\n            try {\n                if (xhr.readyState !== 4) return;\n                if (xhr.status !== 200) throw new Error(\"Failed with status \" + xhr.status);\n\n                var obj = JSON.parse(xhr.responseText);\n                postResult({\n                    \"id\": obj.id,\n                    \"userId\": obj.userId,\n                    \"title\": obj.title,\n                    \"body\": obj.body\n                });\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        }\n\n        if(typeof properties[\"id\"] !== \"number\") throw new Error(\"properties[\\\"id\\\"] is not of type number\");\n        xhr.open(\"PUT\", urlValue + encodeURIComponent(properties[\"id\"]));\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n        xhr.send(data);\n    });\n}\n\nfunction onexecutePostsDelete(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n        var urlValue = configuration[\"ServiceURL\"];\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function () {\n            try {\n                if (xhr.readyState !== 4) return;\n                if (xhr.status !== 200) throw new Error(\"Failed with status \" + xhr.status);\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        }\n\n        if(typeof properties[\"id\"] !== \"number\") throw new Error(\"properties[\\\"id\\\"] is not of type number\");\n        xhr.open(\"DELETE\", urlValue + 'posts/' + encodeURIComponent(properties[\"id\"]));\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n        xhr.send();\n    });\n}\n"],"names":["metadata","displayName","type","value","required","ondescribe","async","configuration","postSchema","objects","description","properties","methods","inputs","outputs","onexecute","objectName","methodName","parameters","Promise","resolve","reject","urlValue","AWSBucketName","AWSRegion","xhr","XMLHttpRequest","onreadystatechange","readyState","status","Error","obj","JSON","parse","responseText","postResult","map","x","key","lastModified","etag","size","storageClass","e","open","send","id","userId","title","body","encodeURIComponent","onexecutePostsGetById","onexecutePostsGetByUserId","data","stringify","setRequestHeader","onexecutePostsCreate","onexecutePostsUpdate","onexecutePostsDelete","onexecutePosts"],"mappings":"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"}