{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["/*\n * AWS S3 integration for K2 using JSSP\n * Special thanks to Kevinsee15 - https://github.com/kevinsee15 \n */\n\nimport '@k2oss/k2-broker-core';\n\nconst AWSS3Bucket = \"AWSS3Bucket\";\n\nconst Key = \"Key\";\nconst LastModified = \"LastModified\";\nconst ETag = \"ETag\";\nconst Size = \"Size\";\nconst StorageClass = \"StorageClass\";\nconst RequestStatus = \"status\";\n\nconst GetBucketContents = \"GetBucketContents\";\n\nconst AWSS3File = \"AWSS3File\";\n\nconst CreateFile = \"CreateFile\";\n\nconst DeleteFile = \"DeleteFile\";\n\nmetadata = {\n    systemName: \"AWS-S3-Bucket\",\n    displayName: \"AWS S3 Bucket\",\n    description: \"Connect to your Amazon Web Services S3 Bucket.\",\n    configuration: {\n        AWSRegion: {\n            displayName: \"AWS Region\",\n            type: \"string\",\n            value: \"us-west-2\",\n            required: true\n        },\n        AWSBucketName: {\n            displayName: \"AWS Bucket Name\",\n            type: \"string\",\n            value: \"s3-bucket-name\",\n            required: true\n        },\n        AWSAccessKey: {\n            displayName: \"AWS IAM User Access Key\",\n            type: \"string\",\n            value: \"IAM User Access Key\",\n            required: true\n        },\n        AWSSecretKey: {\n            displayName: \"AWS IAM User Secret Key\",\n            type: \"string\",\n            value: \"IAM User Secret Key\",\n            required: true\n        }\n    }\n};\n\nondescribe = async function({configuration}): Promise<void> {\n    postSchema({\n        objects: {\n            [AWSS3Bucket]: {\n                displayName: \"AWS S3 Bucket\",\n                description: \"Get S3 Bucket Content List of Objects\",\n                properties: {\n                    [Key]: {\n                        displayName: \"Key\",\n                        type: \"string\",\n                    },\n                    [LastModified]: {\n                        displayName: \"Last Modified\",\n                        type: \"dateTime\"\n                    },\n                    [ETag]: {\n                        displayName: \"Etag\",\n                        type: \"string\"\n                    },\n                    [Size]: {\n                        displayName: \"Size\",\n                        type: \"number\"\n                    },\n                    [StorageClass]: {\n                        displayName: \"Storage Class\",\n                        type: \"number\"\n                    }\n                },\n                methods: {\n                    [GetBucketContents]: {\n                        displayName: \"Get Bucket Contents\",\n                        type: \"list\",\n                        parameters: {\n                            \"prefix\" : { displayName: \"Prefix\", description: \"Directory Path\", type: \"string\"},\n                            \"max-keys\" : { displayName: \"Max Keys\", description: \"Number of Records to List. The Take.\", type: \"number\"},\n                            \"start-after\" : { displayName: \"Start After\", description: \"Key to Start After for Pagination. The Skip.\", type: \"string\"}\n                        },\n                        inputs: [\"prefix\", \"max-keys\", \"start-after\"],\n                        outputs: [ \"Key\", \"LastModified\", \"ETag\", \"Size\", \"StorageClass\" ]\n                    }\n                }\n            },\n            [AWSS3File]: {\n                displayName: \"AWS S3 File\",\n                description: \"Add or Delete AWS S3 Files\",\n                properties: {\n                    \"Key\": {\n                        displayName: \"Key\",\n                        type: \"string\",\n                    }\n                },\n                methods: {\n                    [CreateFile]: {\n                        displayName: \"Persist a file to S3\",\n                        type: \"execute\",\n                        parameters: {\n                            \"Key\" : { displayName: \"Key\", description: \"File Path, Name and Extension (Ex: ParentDirectory/Directory/DocumentName.ext)\", type: \"string\"} \n                        },\n                        inputs: [\"Key\", \"File\"],\n                        requiredInputs: [\"Key\", \"File\"],\n                        outputs: [\"Key\"]\n                    },\n                    [DeleteFile]: {\n                        displayName: \"Remove a file from S3\",\n                        type: \"delete\",\n                        parameters: {\n                            \"Key\" : { displayName: \"Key\", description: \"File Path, Name and Extension (Ex: ParentDirectory/Directory/DocumentName.ext)\", type: \"string\"} \n                        },\n                        inputs: [\"Key\"],\n                        requiredInputs: [\"Key\"],\n                        outputs: [\"Key\"]\n                    }\n                }\n            }\n        }\n    });\n}\n\nonexecute = async function({objectName, methodName, parameters, properties, configuration, schema}): Promise<void> {\n    switch (objectName)\n    {\n        case AWSS3Bucket: await onexecuteBucket(methodName, properties, parameters, configuration); break;\n        // case AWSS3File: await onexecuteFile(methodName, properties, parameters); break;\n        default: throw new Error(\"The object \" + objectName + \" is not supported.\");\n    }\n}\n\nasync function onexecuteBucket(methodName: string, properties: SingleRecord, parameters: SingleRecord, configuration: SingleRecord): Promise<void> {\n    switch (methodName)\n    {\n        case GetBucketContents: await onexecuteGetBucketContents(parameters, properties, configuration); break;\n        default: throw new Error(\"The method \" + methodName + \" is not supported.\");\n    }\n}\n\nfunction onexecuteGetBucketContents(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n        var urlValue = 'https://' + metadata.configuration.AWSBucketName + '.s3.' + metadata.configuration.AWSRegion + '.amazonaws.com?list-type=2&max-keys='\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function () {\n            try {\n                if (xhr.readyState !== 4) return;\n                if (xhr.status !== 200) throw new Error(\"Failed with status \" + xhr.status);\n\n                //console.log(xhr.responseText);\n                var obj = JSON.parse(xhr.responseText);\n                postResult(obj.map(x => {\n                    return {\n                        \"max-keys\": <string> parameters[\"max-keys\"],\n                        \"prefix\": <string> parameters[\"prefix\"],\n                        \"start-after\": <string> parameters[\"start-after\"],\n                    }\n                }));\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        }\n\n        xhr.open(\"GET\", urlValue);\n        xhr.send();\n    });\n\n}\n\n// function onexecuteGetBucketContents(properties: SingleRecord, parameters: SingleRecord): Promise<void> {\n//     return new Promise<void>((resolve, reject) =>\n//     {\n//         var parameterData : {[key: string]: string} = {\n//             \"max-keys\": <string> parameters[\"max-keys\"],\n//             \"prefix\": <string> parameters[\"prefix\"],\n//             \"start-after\": <string> parameters[\"start-after\"],\n//         };\n\n//         var propertyData : {[key: string]: string} = {\n//             \"Key\": <string> properties.Key,\n//             \"LastModified\": <string> properties.LastModified,\n//             \"ETag\": <string> properties.ETag,\n//             \"Size\": <string> properties.Size,\n//             \"StorageClass\": <string> properties.StorageClass\n//         };\n        \n//         _executeXHRRequest(_buildURL(parameterData), propertyData, \"GET\", function(responseObj) {\n//             postResult({\n//                 [RequestStatus]: responseObj[\"status\"]\n//             });\n//             resolve();\n//         });\n//     });\n// }\n\n// Execute XHR Request Helper\nfunction _executeXHRRequest(url: string, propertiesData: {[key: string]: string}, requestType: string, cb) {\n    var xhr = new XMLHttpRequest();\n\n    xhr.onreadystatechange = function () {\n        if (xhr.readyState !== 4)\n            return;\n        if (xhr.status == 201 || xhr.status == 200) {\n            var obj = JSON.parse(xhr.responseText);\n            if (typeof cb === 'function')\n                cb(obj);\n        }\n        else if (xhr.status == 400 || xhr.status == 404) {\n            var obj = JSON.parse(xhr.responseText);\n            throw new Error(obj.code + \": \" + obj.message + \". Data: \" + propertiesData + \" | URL: \" + url);\n        }\n        else {\n            postResult({\n            });\n            var obj = JSON.parse(xhr.responseText);\n            throw new Error(obj.code + \": \" + obj.message + \". Data: \" + propertiesData + \" | URL: \" + url);\n        }\n    };\n    \n    var body = _encodeQueryData(propertiesData);\n\n    xhr.open(requestType.toUpperCase(), url);\n    xhr.withCredentials = true;\n    xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n\n    xhr.send(body);\n}\n\n// Encoding Query Data Helper\nfunction _encodeQueryData(data: {[key: string]: string}) {\n    const ret = [];\n    for(let key in data){\n        let value = data[key];\n        ret.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n    }\n    return ret.join('&');\n}\n\n// Build URL Helper\nfunction _buildURL(data: {[key: string]: string}){\n\n    let constructedURL = 'https://' + metadata.configuration.AWSBucketName + '.s3.' + metadata.configuration.AWSRegion + '.amazonaws.com?list-type=2&max-keys='\n\n    for(let key in data){\n        if(data[key]) {\n            let value = data[key];\n            constructedURL += '&' + encodeURIComponent(key) + '=' + encodeURIComponent(value);\n        }\n    }\n    return constructedURL;\n}\n\n// async function onexecuteFile(methodName: string, properties: SingleRecord, parameters: SingleRecord): Promise<void> {\n//     switch (methodName)\n//     {\n//         case \"create\": await onexecuteCreateFile(properties, parameters); break;\n//         case \"delete\": await onexecuteDeleteFile(properties, parameters); break;\n//         default: throw new Error(\"The method \" + methodName + \" is not supported.\");\n//     }\n// }\n\n// function onexecuteCreateFile(properties: SingleRecord, parameters): Promise<void> {\n//     return new Promise<void>((resolve, reject) =>\n//     {\n//         var xhr = new XMLHttpRequest();\n//         xhr.onreadystatechange = function() {\n//             try {\n//                 postResult({\n//                     \"Key\": parameters[\"Key\"]\n//                 });\n//                 resolve();\n//             } catch (e) {\n//                 reject(e);\n//             }\n//         }\n        \n//         if(typeof properties[\"Key\"] !== \"string\") throw new Error(\"properties[\\\"Key\\\"] is not of type string\");\n//         xhr.open(\"POST\", 'https://' + metadata.configuration.AWSBucketName + '.s3.' + metadata.configuration.AWSRegion + '.amazonaws.com?list-type=2&max-keys=' + encodeURIComponent(parameters['max-keys']) + '&prefix=' + encodeURIComponent(parameters['prefix']) + '&start-after=' + encodeURIComponent(parameters['start=after']) + encodeURIComponent(properties[\"Key\"]));\n//         xhr.setRequestHeader('aws', 'aws s3 k2 jssp test');\n//         xhr.send();\n//     });\n// }\n\n// function onexecuteDeleteFile(properties: SingleRecord, parameters): Promise<void> {\n//     return new Promise<void>((resolve, reject) =>\n//     {\n//         var xhr = new XMLHttpRequest();\n//         xhr.onreadystatechange = function() {\n//             try {\n//                 postResult({\n//                     \"Key\": parameters[\"Key\"]\n//                 });\n//                 resolve();\n//             } catch (e) {\n//                 reject(e);\n//             }\n//         }\n        \n//         if(typeof properties[\"Key\"] !== \"string\") throw new Error(\"properties[\\\"Key\\\"] is not of type string\");\n//         xhr.open(\"DELETE\", 'https://' + metadata.configuration.AWSBucketName + '.s3.' + metadata.configuration.AWSRegion + '.amazonaws.com?list-type=2&max-keys=' + encodeURIComponent(parameters['max-keys']) + '&prefix=' + encodeURIComponent(parameters['prefix']) + '&start-after=' + encodeURIComponent(parameters['start=after']) + encodeURIComponent(properties[\"Key\"]));\n//         xhr.setRequestHeader('aws', 'aws s3 k2 jssp test');\n//         xhr.send();\n//     });\n// }"],"names":["metadata","systemName","displayName","description","configuration","AWSRegion","type","value","required","AWSBucketName","AWSAccessKey","AWSSecretKey","ondescribe","async","postSchema","objects","properties","methods","parameters","inputs","outputs","requiredInputs","onexecute","objectName","methodName","schema","Promise","resolve","reject","urlValue","xhr","XMLHttpRequest","onreadystatechange","readyState","status","Error","obj","JSON","parse","responseText","postResult","map","x","e","open","send","onexecuteGetBucketContents","onexecuteBucket"],"mappings":"AAwBAA,SAAW,CACPC,WAAY,gBACZC,YAAa,gBACbC,YAAa,iDACbC,cAAe,CACXC,UAAW,CACPH,YAAa,aACbI,KAAM,SACNC,MAAO,YACPC,UAAU,GAEdC,cAAe,CACXP,YAAa,kBACbI,KAAM,SACNC,MAAO,iBACPC,UAAU,GAEdE,aAAc,CACVR,YAAa,0BACbI,KAAM,SACNC,MAAO,sBACPC,UAAU,GAEdG,aAAc,CACVT,YAAa,0BACbI,KAAM,SACNC,MAAO,sBACPC,UAAU,KAKtBI,WAAaC,gBAAeT,cAACA,IACzBU,WAAW,CACPC,QAAS,aACU,CACXb,YAAa,gBACbC,YAAa,wCACba,WAAY,KACD,CACHd,YAAa,MACbI,KAAM,uBAEM,CACZJ,YAAa,gBACbI,KAAM,iBAEF,CACJJ,YAAa,OACbI,KAAM,eAEF,CACJJ,YAAa,OACbI,KAAM,uBAEM,CACZJ,YAAa,gBACbI,KAAM,WAGdW,QAAS,mBACgB,CACjBf,YAAa,sBACbI,KAAM,OACNY,WAAY,QACG,CAAEhB,YAAa,SAAUC,YAAa,iBAAkBG,KAAM,qBAC5D,CAAEJ,YAAa,WAAYC,YAAa,uCAAwCG,KAAM,wBACnF,CAAEJ,YAAa,cAAeC,YAAa,+CAAgDG,KAAM,WAErHa,OAAQ,CAAC,SAAU,WAAY,eAC/BC,QAAS,CAAE,MAAO,eAAgB,OAAQ,OAAQ,6BAIjD,CACTlB,YAAa,cACbC,YAAa,6BACba,WAAY,KACD,CACHd,YAAa,MACbI,KAAM,WAGdW,QAAS,YACS,CACVf,YAAa,uBACbI,KAAM,UACNY,WAAY,KACA,CAAEhB,YAAa,MAAOC,YAAa,iFAAkFG,KAAM,WAEvIa,OAAQ,CAAC,MAAO,QAChBE,eAAgB,CAAC,MAAO,QACxBD,QAAS,CAAC,mBAEA,CACVlB,YAAa,wBACbI,KAAM,SACNY,WAAY,KACA,CAAEhB,YAAa,MAAOC,YAAa,iFAAkFG,KAAM,WAEvIa,OAAQ,CAAC,OACTE,eAAgB,CAAC,OACjBD,QAAS,CAAC,cAQlCE,UAAYT,gBAAeU,WAACA,EAADC,WAAaA,EAAbN,WAAyBA,EAAzBF,WAAqCA,EAArCZ,cAAiDA,EAAjDqB,OAAgEA,WAC/EF,OAhIQ,oBAwIpBV,eAA+BW,EAAoBR,EAA0BE,EAA0Bd,UAC3FoB,OAhIc,0BAuI1B,SAAoCN,EAA0BF,EAA0BZ,UAC7E,IAAIsB,QAAc,CAACC,EAASC,SAC3BC,EAAW,WAAa7B,SAASI,cAAcK,cAAgB,OAAST,SAASI,cAAcC,UAAY,uCAC3GyB,EAAM,IAAIC,eACdD,EAAIE,mBAAqB,kBAEM,IAAnBF,EAAIG,WAAkB,UACP,MAAfH,EAAII,OAAgB,MAAM,IAAIC,MAAM,sBAAwBL,EAAII,YAGhEE,EAAMC,KAAKC,MAAMR,EAAIS,cACzBC,WAAWJ,EAAIK,IAAIC,IACR,YACkBxB,EAAW,mBACbA,EAAU,qBACLA,EAAW,mBAG3CS,IACF,MAAOgB,GACLf,EAAOe,KAIfb,EAAIc,KAAK,MAAOf,GAChBC,EAAIe,SA9B0BC,CAA2B5B,uBAC1C,IAAIiB,MAAM,cAAgBX,EAAa,uBAV9BuB,CAAgBvB,EAAYR,EAAYE,uBAEjD,IAAIiB,MAAM,cAAgBZ,EAAa"}