{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import '@k2oss/k2-broker-core';\n\nmetadata = {\n    \"systemName\": \"AWS-S3-Bucket\",\n    \"displayName\": \"AWS S3 Bucket\",\n    \"description\": \"Connect to your Amazon Web Services S3 Bucket.\",\n    \"configuration\": {\n        \"AWSRegion\": {\n            displayName: \"AWS Region\",\n            type: \"string\",\n            required: true\n        },\n        \"AWSBucketName\": {\n            displayName: \"AWS Bucket Name\",\n            type: \"string\",\n            required: true\n        },\n        \"AWSAccessKey\": {\n            displayName: \"AWS IAM User Access Key\",\n            type: \"string\",\n            required: true\n        },\n        \"AWSSecretKey\": {\n            displayName: \"AWS IAM User Secret Key\",\n            type: \"string\",\n            required: true\n        }\n    }\n};\n\nondescribe = async function ({configuration}): Promise<void> {\n    postSchema({\n        objects: {\n            \"bucket\": {\n                displayName: \"Bucket\",\n                description: \"Get S3 Bucket Contents\",\n                properties: {\n                    \"key\": {\n                        displayName: \"Key\",\n                        type: \"string\",\n                    },\n                    \"lastModified\": {\n                        displayName: \"Last Modified\",\n                        type: \"dateTime\"\n                    },\n                    \"eTag\": {\n                        displayName: \"Etag\",\n                        type: \"string\"\n                    },\n                    \"size\": {\n                        displayName: \"Size\",\n                        type: \"number\"\n                    },\n                    \"storageClass\": {\n                        displayName: \"Storage Class\",\n                        type: \"number\"\n                    }\n                },\n                methods: {\n                    \"getList\": {\n                        displayName: \"Get List of Bucket Contents\",\n                        type: \"list\",\n                        inputs: [\"prefix\", \"max-keys\", \"start-after\"],\n                        outputs: [\"key\", \"lastModified\", \"eTag\", \"size\", \"storageClass\"]\n                    }\n                }\n            },\n            \"file\": {\n                displayName: \"File\",\n                description: \"Manages Files on AWS S3\",\n                properties: {\n                    \"fileName\": {\n                        displayName: \"File Name\",\n                        type: \"string\"\n                    },\n                    \"size\": {\n                        displayName: \"File Size\",\n                        type: \"string\"\n                    },\n                    \"contentType\": {\n                        displayName: \"Content Type\",\n                        type: \"string\"\n                    },\n                    \"content\": {\n                        displayName: \"File Content\",\n                        type: \"attachment\"\n                    }\n                },\n                methods: {\n                    \"getFile\": {\n                        displayName: \"Get File\",\n                        type: \"read\",\n                        inputs: [ \"fileName\" ],\n                        requiredInputs: [\"fileName\"],\n                        outputs: [ \"fileName\", \"size\", \"contentType\", \"content\" ]\n                    }\n                }\n            }\n        }\n    }\n    )\n};\n\nonexecute = async function ({objectName, methodName, parameters, properties, configuration}): Promise<void> {\n    try{\n        switch (objectName) {\n            case \"bucket\": await onexecuteBucket(methodName, parameters, properties, configuration); break;\n            case \"file\": await onexecuteFile(methodName, properties, parameters); break;\n            default: throw new Error(\"The object \" + objectName + \" is not supported.\");\n        }\n    }\n    catch (e){\n        throw new Error(\"Stacktrace: \" + e.stack);\n    }\n}\n\nasync function onexecuteBucket(methodName: string, parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    try{\n        switch (methodName) {\n            case \"getList\": await onexecuteBucketGetList(parameters, properties, configuration); break;\n            default: throw new Error(\"The method \" + methodName + \" is not supported.\");\n        }\n    }\n    catch (e){\n        throw new Error(\"Stacktrace: \" + e.stack);\n    }\n}\n\nasync function onexecuteFile(methodName: string, properties: SingleRecord, parameters: SingleRecord): Promise<void> {\n    try{\n        switch (methodName)\n        {\n            case \"getFile\": await onexecuteGetFile(parameters, properties); break;\n            default: throw new Error(\"The method \" + methodName + \" is not supported.\");\n        }\n    }\n    catch (e){\n        throw new Error(\"Stacktrace: \" + e.stack);\n    }\n}\n\nasync function onexecuteBucketGetList(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord) {\n\n    try{\n        var bucketItemsList = await getBucketListItems(configuration);\n\n        console.log('BucketItemsList: ', bucketItemsList);\n\n        var obj:any = bucketItemsList;\n        var result = postResult({\n            'Key': obj.Key,\n            'LastModified': obj.LastModified,\n            'ETag': obj.ETag,\n            'Size': obj.Size,\n            'StorageClass': obj.StorageClass,\n        });\n        console.log('BucketItemsList: ', bucketItemsList);\n\n    }\n    catch (e) {\n        console.log('Error: ', e);\n    }\n    \n    return result;\n    \n}\n\nasync function getBucketListItems(configuration): Promise<void> {\n    try {\n        var aws = require('aws-sdk');\n        aws.config.setPromisesDependency();\n        aws.config.update({\n            accessKeyId: configuration['AWSAccessKey'],\n            secretAccessKey: configuration[\"AWSSecretKey\"],\n            region: configuration[\"AWSRegion\"]\n        });\n\n        var s3 = new aws.S3();\n\n        var bucketItems = await s3.listObjectsV2({\n            Bucket: configuration['AWSBucketName']\n        }).promise();\n\n        console.log('BucketItems: ', bucketItems);\n    } catch (e) {\n        console.log('Error getBucketListItems: ', e);\n    }\n    return bucketItems.Contents;\n}\n\n\nfunction onexecuteGetFile(parameters: SingleRecord, properties: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) =>\n    {\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function() {\n            try {\n\n                if (xhr.readyState !== 4) return;\n                if (xhr.status !== 200) throw new Error(\"Failed with status \" + xhr.status);\n\n                postResult({\n                    \"fileName\": properties[\"fileName\"],\n                    \"size\": xhr.getResponseHeader('Content-Length'),\n                    \"contentType\": xhr.getResponseHeader('Content-Type'),\n                    \"content\": xhr.response\n                });\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        };\n        \n        xhr.open(\"GET\", 'https://k2-public-bucket.s3.us-west-2.amazonaws.com/Images/IDontThinkThatMemes.jpg');\n        xhr.responseType = 'blob';\n\n        xhr.send();\n    });\n}\n\nfunction onexecuteTodoGetWithParams(parameters: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) =>\n    {\n        try {\n            postResult({\n                \"id\": parameters[\"pid\"]\n            });\n            resolve();\n        } catch (e) {\n            reject(e);\n        }\n        \n    });\n}"],"names":["metadata","displayName","type","required","ondescribe","async","configuration","postSchema","objects","description","properties","methods","inputs","outputs","requiredInputs","onexecute","objectName","methodName","parameters","bucketItemsList","aws","require","config","setPromisesDependency","update","accessKeyId","secretAccessKey","region","s3","S3","bucketItems","listObjectsV2","Bucket","promise","console","log","e","Contents","getBucketListItems","obj","result","postResult","Key","LastModified","ETag","Size","StorageClass","onexecuteBucketGetList","Error","stack","onexecuteBucket","Promise","resolve","reject","xhr","XMLHttpRequest","onreadystatechange","readyState","status","getResponseHeader","response","open","responseType","send","onexecuteGetFile","onexecuteFile"],"mappings":"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"}