{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import '@k2oss/k2-broker-core';\n\nmetadata = {\n    \"systemName\": \"AWS-S3-Bucket\",\n    \"displayName\": \"AWS S3 Bucket\",\n    \"description\": \"Connect to your Amazon Web Services S3 Bucket.\"\n};\n\nondescribe = async function ({configuration}): Promise<void> {\n    postSchema({\n        objects: {\n            \"bucket\": {\n                displayName: \"Bucket\",\n                description: \"Get S3 Bucket Contents\",\n                properties: {\n                    \"key\": {\n                        displayName: \"Key\",\n                        type: \"string\",\n                    },\n                    \"lastModified\": {\n                        displayName: \"Last Modified\",\n                        type: \"dateTime\"\n                    },\n                    \"eTag\": {\n                        displayName: \"Etag\",\n                        type: \"string\"\n                    },\n                    \"size\": {\n                        displayName: \"Size\",\n                        type: \"number\"\n                    },\n                    \"storageClass\": {\n                        displayName: \"Storage Class\",\n                        type: \"number\"\n                    }\n                },\n                methods: {\n                    \"getList\": {\n                        displayName: \"Get List of Bucket Contents\",\n                        type: \"list\",\n                        inputs: [\"prefix\", \"max-keys\", \"start-after\"],\n                        outputs: [\"key\", \"lastModified\", \"eTag\", \"size\", \"storageClass\"]\n                    }\n                }\n            }\n        }\n    }\n    )\n};\n\nonexecute = async function ({objectName, methodName, parameters, properties, configuration}): Promise<void> {\n    switch (objectName) {\n        case \"posts\": await onexecutePosts(methodName, parameters, properties, configuration); break;\n        default: throw new Error(\"The object \" + objectName + \" is not supported.\");\n    }\n}\n\nasync function onexecutePosts(methodName: string, parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    switch (methodName) {\n        case \"getList\": await onexecutePostsGetList(parameters, properties, configuration); break;\n        case \"getById\": await onexecutePostsGetById(parameters, properties, configuration); break;\n        case \"getByUserId\": await onexecutePostsGetByUserId(parameters, properties, configuration); break;\n        case \"create\": await onexecutePostsCreate(parameters, properties, configuration); break;\n        case \"update\": await onexecutePostsUpdate(parameters, properties, configuration); break;\n        case \"delete\": await onexecutePostsDelete(parameters, properties, configuration); break;\n        default: throw new Error(\"The method \" + methodName + \" is not supported.\");\n    }\n}\n\nfunction onexecutePostsGetList(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n        var urlValue = 'https://k2-jssp-bucket.s3.us-west-2.amazonaws.com?list-type=2&max-keys=50&prefix=Image&start-after=1';\n        var xhr = new XMLHttpRequest();\n        console.log('After xhr request is created');\n        xhr.onreadystatechange = function () {\n            try {\n                if (xhr.readyState !== 4) return;\n                if (xhr.status !== 200) throw new Error(\"Failed with status \" + xhr.status);\n\n                //console.log(xhr.responseText);\n                var obj = JSON.parse(xhr.responseText);\n                postResult(obj.map(x => {\n                    return {\n                        \"key\": x.key,\n                        \"lastModified\": x.lastModified,\n                        \"etag\": x.etag,\n                        \"size\": x.size,\n                        \"storageClass\": x.storageClass\n                    }\n                }));\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        }\n\n        xhr.open(\"GET\", urlValue);\n        xhr.send();\n    });\n\n}\n\nfunction onexecutePostsGetById(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n        var urlValue = configuration[\"ServiceURL\"] + 'posts/';\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function () {\n            try {\n                if (xhr.readyState !== 4) return;\n                if (xhr.status !== 200) throw new Error(\"Failed with status \" + xhr.status);\n\n                var obj = JSON.parse(xhr.responseText);\n                postResult({\n                    \"id\": obj.id,\n                    \"userId\": obj.userId,\n                    \"title\": obj.title,\n                    \"body\": obj.body\n                });\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        }\n\n        if(typeof properties[\"id\"] !== \"number\") throw new Error(\"properties[\\\"id\\\"] is not of type number\");\n\n        xhr.open(\"GET\", urlValue + encodeURIComponent(properties[\"id\"]));\n        xhr.send();\n    });\n}\n\nfunction onexecutePostsGetByUserId(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n        var urlValue = configuration[\"ServiceURL\"] + 'posts?userId=';\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function () {\n            try {\n                if (xhr.readyState !== 4) return;\n                if (xhr.status !== 200) throw new Error(\"Failed with status \" + xhr.status);\n\n                var obj = JSON.parse(xhr.responseText);\n                postResult(obj.map(x => {\n                    return {\n                        \"id\": x.id,\n                        \"userId\": x.userId,\n                        \"title\": x.title,\n                        \"body\": x.body\n                    }\n                }));\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n\n        }\n\n        if(typeof properties[\"userId\"] !== \"number\") throw new Error(\"properties[\\\"userId\\\"] is not of type number\");\n        xhr.open(\"GET\", urlValue + encodeURIComponent(properties[\"userId\"]));\n        xhr.send();\n    });\n}\n\n\nfunction onexecutePostsCreate(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n        var urlValue = configuration[\"ServiceURL\"] + 'posts/';\n        var data = JSON.stringify({\n            \"userId\": properties[\"userId\"],\n            \"title\": properties[\"title\"],\n            \"body\": properties[\"body\"]\n        });\n\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function () {\n            try {\n                if (xhr.readyState !== 4) return;\n                // look for 'created' code\n                if (xhr.status !== 201) throw new Error(\"Failed with status \" + xhr.status);\n\n                var obj = JSON.parse(xhr.responseText);\n                postResult({\n                    \"id\": obj.id,\n                    \"userId\": obj.userId,\n                    \"title\": obj.title,\n                    \"body\": obj.body\n                });\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        }\n        xhr.open(\"POST\", urlValue);\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n        xhr.send(data);\n    });\n}\n\nfunction onexecutePostsUpdate(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n        var urlValue = configuration[\"ServiceURL\"] + 'posts/';\n        var data = JSON.stringify({\n            \"userId\": properties[\"userId\"],\n            \"title\": properties[\"title\"],\n            \"body\": properties[\"body\"]\n        });\n\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function () {\n            try {\n                if (xhr.readyState !== 4) return;\n                if (xhr.status !== 200) throw new Error(\"Failed with status \" + xhr.status);\n\n                var obj = JSON.parse(xhr.responseText);\n                postResult({\n                    \"id\": obj.id,\n                    \"userId\": obj.userId,\n                    \"title\": obj.title,\n                    \"body\": obj.body\n                });\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        }\n\n        if(typeof properties[\"id\"] !== \"number\") throw new Error(\"properties[\\\"id\\\"] is not of type number\");\n        xhr.open(\"PUT\", urlValue + encodeURIComponent(properties[\"id\"]));\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n        xhr.send(data);\n    });\n}\n\nfunction onexecutePostsDelete(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n        var urlValue = configuration[\"ServiceURL\"];\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function () {\n            try {\n                if (xhr.readyState !== 4) return;\n                if (xhr.status !== 200) throw new Error(\"Failed with status \" + xhr.status);\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        }\n\n        if(typeof properties[\"id\"] !== \"number\") throw new Error(\"properties[\\\"id\\\"] is not of type number\");\n        xhr.open(\"DELETE\", urlValue + 'posts/' + encodeURIComponent(properties[\"id\"]));\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n        xhr.send();\n    });\n}\n"],"names":["metadata","ondescribe","async","configuration","postSchema","objects","displayName","description","properties","type","methods","inputs","outputs","onexecute","objectName","methodName","parameters","Promise","resolve","reject","xhr","XMLHttpRequest","console","log","onreadystatechange","readyState","status","Error","obj","JSON","parse","responseText","postResult","map","x","key","lastModified","etag","size","storageClass","e","open","send","urlValue","id","userId","title","body","encodeURIComponent","onexecutePostsGetById","onexecutePostsGetByUserId","data","stringify","setRequestHeader","onexecutePostsCreate","onexecutePostsUpdate","onexecutePostsDelete","onexecutePosts"],"mappings":"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"}