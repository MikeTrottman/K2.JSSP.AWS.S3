{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["/*\n * AWS S3 integration for K2 using JSSP\n */\n\nimport '@k2oss/k2-broker-core';\n\nmetadata = {\n    \"systemName\": \"AWS-S3\",\n    \"displayName\": \"AWS S3\",\n    \"description\": \"Connect to your Amazon Web Services S3 Bucket.\",\n    \"configuration\": {\n        \"AWSRegion\": {\n            displayName: \"AWS Region\",\n            type: \"string\",\n            value: \"ex: us-west-2\",\n            required: true\n        },\n        \"AWSBucketName\": {\n            displayName: \"AWS Bucket Name\",\n            type: \"string\",\n            value: \"s3-bucket-name\",\n            required: true\n        },\n        \"AWSAccessKey\": {\n            displayName: \"AWS IAM User Access Key\",\n            type: \"string\",\n            value: \"IAM User Access Key\",\n            required: true\n        },\n        \"AWSSecretKey\": {\n            displayName: \"AWS IAM User Secret Key\",\n            type: \"string\",\n            value: \"IAM User Secret Key\",\n            required: true\n        }\n    }\n};\n\nondescribe = async function({configuration}): Promise<void> {\n    postSchema({\n        objects: {\n            \"AWSS3Bucket\": {\n                displayName: \"AWS S3 Bucket\",\n                description: \"Get S3 Bucket Content List of Objects\",\n                properties: {\n                    \"Key\": {\n                        displayName: \"Key\",\n                        type: \"string\",\n                    },\n                    \"LastModified\": {\n                        displayName: \"Last Modified\",\n                        type: \"dateTime\"\n                    },\n                    \"ETag\": {\n                        displayName: \"Etag\",\n                        type: \"string\"\n                    },\n                    \"Size\": {\n                        displayName: \"Size\",\n                        type: \"number\"\n                    },\n                    \"StorageClass\": {\n                        displayName: \"Storage Class\",\n                        type: \"number\"\n                    }\n                },\n                methods: {\n                    \"GetBucketContents\": {\n                        displayName: \"Get Bucket Contents\",\n                        type: \"list\",\n                        parameters: {\n                            \"prefix\" : { displayName: \"Prefix\", description: \"Directory Path\", type: \"string\"},\n                            \"max-keys\" : { displayName: \"Max Keys\", description: \"Number of Records to List. The Take.\", type: \"number\"},\n                            \"start-after\" : { displayName: \"Start After\", description: \"Key to Start After for Pagination. The Skip.\", type: \"string\"}\n                        },\n                        inputs: [\"prefix\", \"max-keys\", \"start-after\"],\n                        outputs: [ \"key\", \"lastModified\", \"eTag\", \"size\", \"storageClass\" ]\n                    }\n                }\n            }\n        }\n    });\n}\n\nonexecute = async function({objectName, methodName, parameters, properties, configuration}): Promise<void> {\n    switch (objectName)\n    {\n        case \"AWSS3Bucket\": await onexecuteBucket(methodName, properties, parameters, configuration); break;\n        // case AWSS3File: await onexecuteFile(methodName, properties, parameters); break;\n        default: throw new Error(\"The object \" + objectName + \" is not supported.\");\n    }\n}\n\nasync function onexecuteBucket(methodName: string, properties: SingleRecord, parameters: SingleRecord, configuration: SingleRecord): Promise<void> {\n    switch (methodName)\n    {\n        case \"GetBucketContents\": await onexecuteGetBucketContents(parameters, properties, configuration); break;\n        default: throw new Error(\"The method \" + methodName + \" is not supported.\");\n    }\n}\n\nfunction onexecuteGetBucketContents(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n        var urlValue = 'https://' + metadata[\"configuration\"][\"AWSBucketName\"] + '.s3.' + metadata[\"configuration\"][\"AWSRegion\"] + '.amazonaws.com?list-type=2&max-keys='\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function () {\n            try {\n                if (xhr.readyState !== 4) {\n                    var obj = JSON.parse(xhr.responseText);\n                    throw new Error(\"Ready State Fail - Failed with status \" + xhr.status + \" | \" + obj.code + \": \" + obj.message + \" | URL: \" + urlValue);\n                }\n                \n                if (xhr.status !== 200) {\n                    var obj = JSON.parse(xhr.responseText);\n                    throw new Error(\"Failed with status \" + xhr.status + \" | \" + obj.code + \": \" + obj.message + \" | URL: \" + urlValue);\n                }\n\n                //console.log(xhr.responseText);\n                var obj = JSON.parse(xhr.responseText);\n                postResult(obj.map(x => {\n                    return {\n                        \"max-keys\": <string> parameters[\"max-keys\"],\n                        \"prefix\": <string> parameters[\"prefix\"],\n                        \"start-after\": <string> parameters[\"start-after\"],\n                    }\n                }));\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        }\n\n        xhr.open(\"GET\", urlValue);\n        xhr.send();\n    });\n\n}\n"],"names":["metadata","displayName","type","value","required","ondescribe","async","configuration","postSchema","objects","description","properties","methods","parameters","inputs","outputs","onexecute","objectName","methodName","Promise","resolve","reject","urlValue","xhr","XMLHttpRequest","onreadystatechange","readyState","obj","JSON","parse","responseText","Error","status","code","message","postResult","map","x","e","open","send","onexecuteGetBucketContents","onexecuteBucket"],"mappings":"AAMAA,SAAW,YACO,qBACC,qBACA,+DACE,WACA,CACTC,YAAa,aACbC,KAAM,SACNC,MAAO,gBACPC,UAAU,iBAEG,CACbH,YAAa,kBACbC,KAAM,SACNC,MAAO,iBACPC,UAAU,gBAEE,CACZH,YAAa,0BACbC,KAAM,SACNC,MAAO,sBACPC,UAAU,gBAEE,CACZH,YAAa,0BACbC,KAAM,SACNC,MAAO,sBACPC,UAAU,KAKtBC,WAAaC,gBAAeC,cAACA,IACzBC,WAAW,CACPC,QAAS,aACU,CACXR,YAAa,gBACbS,YAAa,wCACbC,WAAY,KACD,CACHV,YAAa,MACbC,KAAM,uBAEM,CACZD,YAAa,gBACbC,KAAM,iBAEF,CACJD,YAAa,OACbC,KAAM,eAEF,CACJD,YAAa,OACbC,KAAM,uBAEM,CACZD,YAAa,gBACbC,KAAM,WAGdU,QAAS,mBACgB,CACjBX,YAAa,sBACbC,KAAM,OACNW,WAAY,QACG,CAAEZ,YAAa,SAAUS,YAAa,iBAAkBR,KAAM,qBAC5D,CAAED,YAAa,WAAYS,YAAa,uCAAwCR,KAAM,wBACnF,CAAED,YAAa,cAAeS,YAAa,+CAAgDR,KAAM,WAErHY,OAAQ,CAAC,SAAU,WAAY,eAC/BC,QAAS,CAAE,MAAO,eAAgB,OAAQ,OAAQ,uBAQ1EC,UAAYV,gBAAeW,WAACA,EAADC,WAAaA,EAAbL,WAAyBA,EAAzBF,WAAqCA,EAArCJ,cAAiDA,WAChEU,OAEC,oBAMbX,eAA+BY,EAAoBP,EAA0BE,EAA0BN,UAC3FW,OAEC,0BAKb,SAAoCL,EAA0BF,EAA0BJ,UAC7E,IAAIY,QAAc,CAACC,EAASC,SAC3BC,EAAW,WAAatB,SAAQ,cAAR,cAA6C,OAASA,SAAQ,cAAR,UAAyC,uCACvHuB,EAAM,IAAIC,eACdD,EAAIE,mBAAqB,kBAEM,IAAnBF,EAAIG,WAAkB,KAClBC,EAAMC,KAAKC,MAAMN,EAAIO,oBACnB,IAAIC,MAAM,yCAA2CR,EAAIS,OAAS,MAAQL,EAAIM,KAAO,KAAON,EAAIO,QAAU,WAAaZ,MAG9G,MAAfC,EAAIS,aACAL,EAAMC,KAAKC,MAAMN,EAAIO,cACnB,IAAIC,MAAM,sBAAwBR,EAAIS,OAAS,MAAQL,EAAIM,KAAO,KAAON,EAAIO,QAAU,WAAaZ,GAI1GK,EAAMC,KAAKC,MAAMN,EAAIO,cACzBK,WAAWR,EAAIS,IAAIC,IACR,YACkBxB,EAAW,mBACbA,EAAU,qBACLA,EAAW,mBAG3CO,IACF,MAAOkB,GACLjB,EAAOiB,KAIff,EAAIgB,KAAK,MAAOjB,GAChBC,EAAIiB,SArC4BC,CAA2B5B,uBAC5C,IAAIkB,MAAM,cAAgBb,EAAa,uBAV5BwB,CAAgBxB,EAAYP,EAAYE,uBAEnD,IAAIkB,MAAM,cAAgBd,EAAa"}