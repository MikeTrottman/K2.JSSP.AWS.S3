{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import '@k2oss/k2-broker-core';\n\nmetadata = {\n    systemName: \"AWS-S3-Bucket\",\n    displayName: \"AWS S3 Bucket\",\n    description: \"Connect to your Amazon Web Services S3 Bucket.\",\n    configuration: {\n        \"AWSRegion\": {\n            displayName: \"AWS Region\",\n            type: \"string\",\n            value: \"us-west-2\",\n            required: true\n        },\n        \"AWSBucketName\": {\n            displayName: \"AWS Bucket Name\",\n            type: \"string\",\n            value: \"s3-bucket-name\",\n            required: true\n        },\n        \"AWSAccessKey\": {\n            displayName: \"AWS IAM User Access Key\",\n            type: \"string\",\n            value: \"IAM User Access Key\",\n            required: true\n        },\n        \"AWSSecretKey\": {\n            displayName: \"AWS IAM User Secret Key\",\n            type: \"string\",\n            value: \"IAM User Secret Key\",\n            required: true\n        }\n    }\n};\n\nondescribe = async function ({configuration}): Promise<void> {\n    postSchema({\n        objects: {\n            \"bucket\": {\n                displayName: \"Bucket\",\n                description: \"Get S3 Bucket Contents\",\n                properties: {\n                    \"key\": {\n                        displayName: \"Key\",\n                        type: \"string\",\n                    },\n                    \"lastModified\": {\n                        displayName: \"Last Modified\",\n                        type: \"dateTime\"\n                    },\n                    \"eTag\": {\n                        displayName: \"Etag\",\n                        type: \"string\"\n                    },\n                    \"size\": {\n                        displayName: \"Size\",\n                        type: \"number\"\n                    },\n                    \"storageClass\": {\n                        displayName: \"Storage Class\",\n                        type: \"number\"\n                    }\n                },\n                methods: {\n                    \"getList\": {\n                        displayName: \"Get List of Bucket Contents\",\n                        type: \"list\",\n                        inputs: [\"prefix\", \"max-keys\", \"start-after\"],\n                        outputs: [\"key\", \"lastModified\", \"eTag\", \"size\", \"storageClass\"]\n                    }\n                }\n            }\n        }\n    }\n    )\n};\n\nonexecute = async function ({objectName, methodName, parameters, properties, configuration}): Promise<void> {\n    switch (objectName) {\n        case \"posts\": await onexecutePosts(methodName, parameters, properties, configuration); break;\n        default: throw new Error(\"The object \" + objectName + \" is not supported.\");\n    }\n}\n\nasync function onexecutePosts(methodName: string, parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    switch (methodName) {\n        case \"getList\": await onexecutePostsGetList(parameters, properties, configuration); break;\n        case \"getById\": await onexecutePostsGetById(parameters, properties, configuration); break;\n        case \"getByUserId\": await onexecutePostsGetByUserId(parameters, properties, configuration); break;\n        case \"create\": await onexecutePostsCreate(parameters, properties, configuration); break;\n        case \"update\": await onexecutePostsUpdate(parameters, properties, configuration); break;\n        case \"delete\": await onexecutePostsDelete(parameters, properties, configuration); break;\n        default: throw new Error(\"The method \" + methodName + \" is not supported.\");\n    }\n}\n\nfunction onexecutePostsGetList(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n        var urlValue = 'https://k2-jssp-bucket.s3.us-west-2.amazonaws.com?list-type=2&max-keys=50&prefix=Image&start-after=1';\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function () {\n            try {\n                if (xhr.readyState !== 4) return;\n                if (xhr.status !== 200) throw new Error(\"Failed with status \" + xhr.status);\n\n                //console.log(xhr.responseText);\n                var obj = JSON.parse(xhr.responseText);\n                postResult(obj.map(x => {\n                    return {\n                        \"key\": x.key,\n                        \"lastModified\": x.lastModified,\n                        \"etag\": x.etag,\n                        \"size\": x.size,\n                        \"storageClass\": x.storageClass\n                    }\n                }));\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        }\n\n        xhr.open(\"GET\", urlValue);\n        xhr.send();\n    });\n\n}\n\nfunction onexecutePostsGetById(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n        var urlValue = configuration[\"ServiceURL\"] + 'posts/';\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function () {\n            try {\n                if (xhr.readyState !== 4) return;\n                if (xhr.status !== 200) throw new Error(\"Failed with status \" + xhr.status);\n\n                var obj = JSON.parse(xhr.responseText);\n                postResult({\n                    \"id\": obj.id,\n                    \"userId\": obj.userId,\n                    \"title\": obj.title,\n                    \"body\": obj.body\n                });\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        }\n\n        if(typeof properties[\"id\"] !== \"number\") throw new Error(\"properties[\\\"id\\\"] is not of type number\");\n\n        xhr.open(\"GET\", urlValue + encodeURIComponent(properties[\"id\"]));\n        xhr.send();\n    });\n}\n\nfunction onexecutePostsGetByUserId(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n        var urlValue = configuration[\"ServiceURL\"] + 'posts?userId=';\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function () {\n            try {\n                if (xhr.readyState !== 4) return;\n                if (xhr.status !== 200) throw new Error(\"Failed with status \" + xhr.status);\n\n                var obj = JSON.parse(xhr.responseText);\n                postResult(obj.map(x => {\n                    return {\n                        \"id\": x.id,\n                        \"userId\": x.userId,\n                        \"title\": x.title,\n                        \"body\": x.body\n                    }\n                }));\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n\n        }\n\n        if(typeof properties[\"userId\"] !== \"number\") throw new Error(\"properties[\\\"userId\\\"] is not of type number\");\n        xhr.open(\"GET\", urlValue + encodeURIComponent(properties[\"userId\"]));\n        xhr.send();\n    });\n}\n\n\nfunction onexecutePostsCreate(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n        var urlValue = configuration[\"ServiceURL\"] + 'posts/';\n        var data = JSON.stringify({\n            \"userId\": properties[\"userId\"],\n            \"title\": properties[\"title\"],\n            \"body\": properties[\"body\"]\n        });\n\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function () {\n            try {\n                if (xhr.readyState !== 4) return;\n                // look for 'created' code\n                if (xhr.status !== 201) throw new Error(\"Failed with status \" + xhr.status);\n\n                var obj = JSON.parse(xhr.responseText);\n                postResult({\n                    \"id\": obj.id,\n                    \"userId\": obj.userId,\n                    \"title\": obj.title,\n                    \"body\": obj.body\n                });\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        }\n        xhr.open(\"POST\", urlValue);\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n        xhr.send(data);\n    });\n}\n\nfunction onexecutePostsUpdate(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n        var urlValue = configuration[\"ServiceURL\"] + 'posts/';\n        var data = JSON.stringify({\n            \"userId\": properties[\"userId\"],\n            \"title\": properties[\"title\"],\n            \"body\": properties[\"body\"]\n        });\n\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function () {\n            try {\n                if (xhr.readyState !== 4) return;\n                if (xhr.status !== 200) throw new Error(\"Failed with status \" + xhr.status);\n\n                var obj = JSON.parse(xhr.responseText);\n                postResult({\n                    \"id\": obj.id,\n                    \"userId\": obj.userId,\n                    \"title\": obj.title,\n                    \"body\": obj.body\n                });\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        }\n\n        if(typeof properties[\"id\"] !== \"number\") throw new Error(\"properties[\\\"id\\\"] is not of type number\");\n        xhr.open(\"PUT\", urlValue + encodeURIComponent(properties[\"id\"]));\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n        xhr.send(data);\n    });\n}\n\nfunction onexecutePostsDelete(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n        var urlValue = configuration[\"ServiceURL\"];\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function () {\n            try {\n                if (xhr.readyState !== 4) return;\n                if (xhr.status !== 200) throw new Error(\"Failed with status \" + xhr.status);\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        }\n\n        if(typeof properties[\"id\"] !== \"number\") throw new Error(\"properties[\\\"id\\\"] is not of type number\");\n        xhr.open(\"DELETE\", urlValue + 'posts/' + encodeURIComponent(properties[\"id\"]));\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n        xhr.send();\n    });\n}\n"],"names":["metadata","systemName","displayName","description","configuration","type","value","required","ondescribe","async","postSchema","objects","properties","methods","inputs","outputs","onexecute","objectName","methodName","parameters","Promise","resolve","reject","xhr","XMLHttpRequest","onreadystatechange","readyState","status","Error","obj","JSON","parse","responseText","postResult","map","x","key","lastModified","etag","size","storageClass","e","open","send","urlValue","id","userId","title","body","encodeURIComponent","onexecutePostsGetById","onexecutePostsGetByUserId","data","stringify","setRequestHeader","onexecutePostsCreate","onexecutePostsUpdate","onexecutePostsDelete","onexecutePosts"],"mappings":"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"}