{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import '@k2oss/k2-broker-core';\n\nmetadata = {\n    systemName: \"com.k2.s3sample\",\n    displayName: \"Example AWS S3 Broker\",\n    description: \"An example broker that accesses AWS S3 Storage.\"\n};\n\nondescribe = async function(): Promise<void> {\n    postSchema({\n        objects: {\n            \"File\": {\n                displayName: \"File\",\n                description: \"Manages Files on AWS S3\",\n                properties: {\n                    \"fileName\": {\n                        displayName: \"File Name\",\n                        type: \"string\"\n                    },\n                    \"size\": {\n                        displayName: \"File Size\",\n                        type: \"string\"\n                    },\n                    \"contentType\": {\n                        displayName: \"Content Type\",\n                        type: \"string\"\n                    },\n                    \"content\": {\n                        displayName: \"File Content\",\n                        type: \"attachment\"\n                    }\n                },\n                methods: {\n                    \"Get\": {\n                        displayName: \"Get File\",\n                        type: \"read\",\n                        inputs: [ \"fileName\" ],\n                        requiredInputs: [\"fileName\"],\n                        outputs: [ \"fileName\", \"size\", \"contentType\", \"content\" ]\n                    }\n                }\n            }\n        }\n    });\n}\n\nonexecute = async function(objectName, methodName, parameters, properties): Promise<void> {\n    switch (objectName)\n    {\n        case \"File\": await onexecuteFile(methodName, properties, parameters); break;\n        default: throw new Error(\"The object \" + objectName + \" is not supported.\");\n    }\n}\n\nasync function onexecuteFile(methodName: string, properties: SingleRecord, parameters: SingleRecord): Promise<void> {\n    switch (methodName)\n    {\n        case \"Get\": await onexecuteGetFile(parameters, properties); break;\n        default: throw new Error(\"The method \" + methodName + \" is not supported.\");\n    }\n}\n\nfunction onexecuteGetFile(parameters: SingleRecord, properties: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) =>\n    {\n        console.log('===htk in onexecuteGetFile');\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function() {\n            try {\n                //console.log('=== htk readyState '+ xhr.readyState);\n                //console.log('=== htk status '+ xhr.status);\n\n                if (xhr.readyState !== 4) return;\n                if (xhr.status !== 200) throw new Error(\"Failed with status \" + xhr.status);\n\n                console.log('=== hdr '+xhr.getResponseHeader('Content-Type'));\n                console.log('=== len '+xhr.getResponseHeader('Content-Length'));\n                console.log('===  file '+ xhr.response);\n\n                postResult({\n                    \"fileName\": properties[\"fileName\"],\n                    \"size\": xhr.getResponseHeader('Content-Length'),\n                    \"contentType\": xhr.getResponseHeader('Content-Type'),\n                    \"content\": xhr.response\n                });\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        };\n\n        //xhr.setRequestHeader('test', 'test value');\n        console.log(\"=== fn \"+properties[\"fileName\"]);\n        xhr.open(\"GET\", 'https://rag0scnz17.execute-api.us-east-1.amazonaws.com/test/files/'+properties['fileName']);\n        xhr.responseType = 'blob';\n\n        xhr.send();\n    });\n}\n\nfunction onexecuteTodoGetWithParams(parameters: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) =>\n    {\n        try {\n            postResult({\n                \"id\": parameters[\"pid\"]\n            });\n            resolve();\n        } catch (e) {\n            reject(e);\n        }\n        \n    });\n}"],"names":["metadata","systemName","displayName","description","ondescribe","async","postSchema","objects","properties","type","methods","inputs","requiredInputs","outputs","onexecute","objectName","methodName","parameters","Promise","resolve","reject","console","log","xhr","XMLHttpRequest","onreadystatechange","readyState","status","Error","getResponseHeader","response","postResult","e","open","responseType","send","onexecuteGetFile","onexecuteFile"],"mappings":"AAEAA,SAAW,CACPC,WAAY,kBACZC,YAAa,wBACbC,YAAa,mDAGjBC,WAAaC,iBACTC,WAAW,CACPC,QAAS,MACG,CACJL,YAAa,OACbC,YAAa,0BACbK,WAAY,UACI,CACRN,YAAa,YACbO,KAAM,eAEF,CACJP,YAAa,YACbO,KAAM,sBAEK,CACXP,YAAa,eACbO,KAAM,kBAEC,CACPP,YAAa,eACbO,KAAM,eAGdC,QAAS,KACE,CACHR,YAAa,WACbO,KAAM,OACNE,OAAQ,CAAE,YACVC,eAAgB,CAAC,YACjBC,QAAS,CAAE,WAAY,OAAQ,cAAe,kBAQtEC,UAAYT,eAAeU,EAAYC,EAAYC,EAAYT,UACnDO,OAEC,aAKbV,eAA6BW,EAAoBR,EAA0BS,UAC/DD,OAEC,YAKb,SAA0BC,EAA0BT,UACzC,IAAIU,QAAc,CAACC,EAASC,KAE/BC,QAAQC,IAAI,kCACRC,EAAM,IAAIC,eACdD,EAAIE,mBAAqB,kBAKM,IAAnBF,EAAIG,WAAkB,UACP,MAAfH,EAAII,OAAgB,MAAM,IAAIC,MAAM,sBAAwBL,EAAII,QAEpEN,QAAQC,IAAI,WAAWC,EAAIM,kBAAkB,iBAC7CR,QAAQC,IAAI,WAAWC,EAAIM,kBAAkB,mBAC7CR,QAAQC,IAAI,aAAcC,EAAIO,UAE9BC,WAAW,UACKvB,EAAU,cACde,EAAIM,kBAAkB,8BACfN,EAAIM,kBAAkB,wBAC1BN,EAAIO,WAEnBX,IACF,MAAOa,GACLZ,EAAOY,KAKfX,QAAQC,IAAI,UAAUd,EAAU,UAChCe,EAAIU,KAAK,MAAO,qEAAqEzB,EAAU,UAC/Fe,EAAIW,aAAe,OAEnBX,EAAIY,SAvCcC,CAAiBnB,EAAYT,uBAChC,IAAIoB,MAAM,cAAgBZ,EAAa,uBATnCqB,CAAcrB,EAAYR,uBAC9B,IAAIoB,MAAM,cAAgBb,EAAa"}