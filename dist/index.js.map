{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import '@k2oss/k2-broker-core';\n\nmetadata = {\n    \"systemName\": \"AWS-S3-Bucket\",\n    \"displayName\": \"AWS S3 Bucket\",\n    \"description\": \"Connect to your Amazon Web Services S3 Bucket.\",\n    \"configuration\": {\n        \"AWSRegion\": {\n            displayName: \"AWS Region\",\n            type: \"string\",\n            required: true\n        },\n        \"AWSBucketName\": {\n            displayName: \"AWS Bucket Name\",\n            type: \"string\",\n            required: true\n        },\n        \"AWSAccessKey\": {\n            displayName: \"AWS IAM User Access Key\",\n            type: \"string\",\n            required: true\n        },\n        \"AWSSecretKey\": {\n            displayName: \"AWS IAM User Secret Key\",\n            type: \"string\",\n            required: true\n        }\n    }\n};\n\nondescribe = async function ({configuration}): Promise<void> {\n    postSchema({\n        objects: {\n            \"bucket\": {\n                displayName: \"Bucket\",\n                description: \"Get S3 Bucket Contents\",\n                properties: {\n                    \"key\": {\n                        displayName: \"Key\",\n                        type: \"string\",\n                    },\n                    \"lastModified\": {\n                        displayName: \"Last Modified\",\n                        type: \"dateTime\"\n                    },\n                    \"eTag\": {\n                        displayName: \"Etag\",\n                        type: \"string\"\n                    },\n                    \"size\": {\n                        displayName: \"Size\",\n                        type: \"number\"\n                    },\n                    \"storageClass\": {\n                        displayName: \"Storage Class\",\n                        type: \"number\"\n                    }\n                },\n                methods: {\n                    \"getList\": {\n                        displayName: \"Get List of Bucket Contents\",\n                        type: \"list\",\n                        inputs: [\"prefix\", \"max-keys\", \"start-after\"],\n                        outputs: [\"key\", \"lastModified\", \"eTag\", \"size\", \"storageClass\"]\n                    }\n                }\n            },\n            \"file\": {\n                displayName: \"File\",\n                description: \"Manages Files on AWS S3\",\n                properties: {\n                    \"fileName\": {\n                        displayName: \"File Name\",\n                        type: \"string\"\n                    },\n                    \"size\": {\n                        displayName: \"File Size\",\n                        type: \"string\"\n                    },\n                    \"contentType\": {\n                        displayName: \"Content Type\",\n                        type: \"string\"\n                    },\n                    \"content\": {\n                        displayName: \"File Content\",\n                        type: \"attachment\"\n                    }\n                },\n                methods: {\n                    \"getFile\": {\n                        displayName: \"Get File\",\n                        type: \"read\",\n                        inputs: [ \"fileName\" ],\n                        requiredInputs: [\"fileName\"],\n                        outputs: [ \"fileName\", \"size\", \"contentType\", \"content\" ]\n                    }\n                }\n            }\n        }\n    }\n    )\n};\n\nonexecute = async function ({objectName, methodName, parameters, properties, configuration}): Promise<void> {\n    switch (objectName) {\n        case \"bucket\": await onexecuteBucket(methodName, parameters, properties, configuration); break;\n        case \"file\": await onexecuteFile(methodName, properties, parameters); break;\n        default: throw new Error(\"The object \" + objectName + \" is not supported.\");\n    }\n}\n\nasync function onexecuteBucket(methodName: string, parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    switch (methodName) {\n        case \"getList\": await onexecuteBucketGetList(parameters, properties, configuration); break;\n        default: throw new Error(\"The method \" + methodName + \" is not supported.\");\n    }\n}\n\nasync function onexecuteFile(methodName: string, properties: SingleRecord, parameters: SingleRecord): Promise<void> {\n    switch (methodName)\n    {\n        case \"getFile\": await onexecuteGetFile(parameters, properties); break;\n        default: throw new Error(\"The method \" + methodName + \" is not supported.\");\n    }\n}\n\nfunction onexecuteBucketGetList(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n        var urlValue = 'https://k2-public-bucket.s3.us-west-2.amazonaws.com?list-type=2&max-keys=50&prefix=Image&start-after=1';\n        var xhr = new XMLHttpRequest();\n        console.log('After xhr request is created');\n        xhr.onreadystatechange = function () {\n            try {\n                if (xhr.readyState !== 4) return;\n                if (xhr.status !== 200) throw new Error(\"Failed with status \" + xhr.status);\n\n                //console.log(xhr.responseText);\n                var obj = JSON.parse(xhr.responseText);\n                postResult(obj.map(x => {\n                    return {\n                        \"key\": x.key,\n                        \"lastModified\": x.lastModified,\n                        \"etag\": x.etag,\n                        \"size\": x.size,\n                        \"storageClass\": x.storageClass\n                    }\n                }));\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        }\n\n        xhr.open(\"GET\", urlValue);\n        xhr.send();\n    });\n\n}\nfunction onexecuteGetFile(parameters: SingleRecord, properties: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) =>\n    {\n        console.log('===htk in onexecuteGetFile');\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function() {\n            try {\n                console.log(\"Mike was here testing.\");\n                \n                //console.log('=== htk readyState '+ xhr.readyState);\n                //console.log('=== htk status '+ xhr.status);\n\n                if (xhr.readyState !== 4) return;\n                if (xhr.status !== 200) throw new Error(\"Failed with status \" + xhr.status);\n\n                console.log('=== hdr '+xhr.getResponseHeader('Content-Type'));\n                console.log('=== len '+xhr.getResponseHeader('Content-Length'));\n                console.log('===  file '+ xhr.response);\n\n                postResult({\n                    \"fileName\": properties[\"fileName\"],\n                    \"size\": xhr.getResponseHeader('Content-Length'),\n                    \"contentType\": xhr.getResponseHeader('Content-Type'),\n                    \"content\": xhr.response\n                });\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        };\n\n        //xhr.setRequestHeader('test', 'test value');\n        console.log(\"=== fn \"+properties[\"fileName\"]);\n        xhr.open(\"GET\", 'https://k2-public-bucket.s3.us-west-2.amazonaws.com/Images/IDontThinkThatMemes.jpg');\n        xhr.responseType = 'blob';\n\n        xhr.send();\n    });\n}\n\nfunction onexecuteTodoGetWithParams(parameters: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) =>\n    {\n        try {\n            postResult({\n                \"id\": parameters[\"pid\"]\n            });\n            resolve();\n        } catch (e) {\n            reject(e);\n        }\n        \n    });\n}"],"names":["metadata","displayName","type","required","ondescribe","async","configuration","postSchema","objects","description","properties","methods","inputs","outputs","requiredInputs","onexecute","objectName","methodName","parameters","Promise","resolve","reject","xhr","XMLHttpRequest","console","log","onreadystatechange","readyState","status","Error","obj","JSON","parse","responseText","postResult","map","x","key","lastModified","etag","size","storageClass","e","open","send","onexecuteBucket","getResponseHeader","response","responseType","onexecuteGetFile","onexecuteFile"],"mappings":"AAEAA,SAAW,YACO,4BACC,4BACA,+DACE,WACA,CACTC,YAAa,aACbC,KAAM,SACNC,UAAU,iBAEG,CACbF,YAAa,kBACbC,KAAM,SACNC,UAAU,gBAEE,CACZF,YAAa,0BACbC,KAAM,SACNC,UAAU,gBAEE,CACZF,YAAa,0BACbC,KAAM,SACNC,UAAU,KAKtBC,WAAaC,gBAAgBC,cAACA,IAC1BC,WAAW,CACPC,QAAS,QACK,CACNP,YAAa,SACbQ,YAAa,yBACbC,WAAY,KACD,CACHT,YAAa,MACbC,KAAM,uBAEM,CACZD,YAAa,gBACbC,KAAM,iBAEF,CACJD,YAAa,OACbC,KAAM,eAEF,CACJD,YAAa,OACbC,KAAM,uBAEM,CACZD,YAAa,gBACbC,KAAM,WAGdS,QAAS,SACM,CACPV,YAAa,8BACbC,KAAM,OACNU,OAAQ,CAAC,SAAU,WAAY,eAC/BC,QAAS,CAAC,MAAO,eAAgB,OAAQ,OAAQ,wBAIrD,CACJZ,YAAa,OACbQ,YAAa,0BACbC,WAAY,UACI,CACRT,YAAa,YACbC,KAAM,eAEF,CACJD,YAAa,YACbC,KAAM,sBAEK,CACXD,YAAa,eACbC,KAAM,kBAEC,CACPD,YAAa,eACbC,KAAM,eAGdS,QAAS,SACM,CACPV,YAAa,WACbC,KAAM,OACNU,OAAQ,CAAE,YACVE,eAAgB,CAAC,YACjBD,QAAS,CAAE,WAAY,OAAQ,cAAe,kBAStEE,UAAYV,gBAAgBW,WAACA,EAADC,WAAaA,EAAbC,WAAyBA,EAAzBR,WAAqCA,EAArCJ,cAAiDA,WACjEU,OACC,eAMbX,eAA+BY,EAAoBC,EAA0BR,EAA0BJ,UAC3FW,OACC,gBAcF,IAAIE,QAAc,CAACC,EAASC,SAE3BC,EAAM,IAAIC,eACdC,QAAQC,IAAI,gCACZH,EAAII,mBAAqB,kBAEM,IAAnBJ,EAAIK,WAAkB,UACP,MAAfL,EAAIM,OAAgB,MAAM,IAAIC,MAAM,sBAAwBP,EAAIM,YAGhEE,EAAMC,KAAKC,MAAMV,EAAIW,cACzBC,WAAWJ,EAAIK,IAAIC,IACR,KACIA,EAAEC,iBACOD,EAAEE,kBACVF,EAAEG,UACFH,EAAEI,kBACMJ,EAAEK,iBAG1BrB,IACF,MAAOsB,GACLrB,EAAOqB,KAIfpB,EAAIqB,KAAK,MAzBM,0GA0BfrB,EAAIsB,6BAxCW,IAAIf,MAAM,cAAgBZ,EAAa,uBATjC4B,CAAgB5B,aAChC,aAYbZ,eAA6BY,EAAoBP,EAA0BQ,UAC/DD,OAEC,gBAqCb,SAA0BC,EAA0BR,UACzC,IAAIS,QAAc,CAACC,EAASC,KAE/BG,QAAQC,IAAI,kCACRH,EAAM,IAAIC,eACdD,EAAII,mBAAqB,kBAEjBF,QAAQC,IAAI,0BAKW,IAAnBH,EAAIK,WAAkB,UACP,MAAfL,EAAIM,OAAgB,MAAM,IAAIC,MAAM,sBAAwBP,EAAIM,QAEpEJ,QAAQC,IAAI,WAAWH,EAAIwB,kBAAkB,iBAC7CtB,QAAQC,IAAI,WAAWH,EAAIwB,kBAAkB,mBAC7CtB,QAAQC,IAAI,aAAcH,EAAIyB,UAE9Bb,WAAW,UACKxB,EAAU,cACdY,EAAIwB,kBAAkB,8BACfxB,EAAIwB,kBAAkB,wBAC1BxB,EAAIyB,WAEnB3B,IACF,MAAOsB,GACLrB,EAAOqB,KAKflB,QAAQC,IAAI,UAAUf,EAAU,UAChCY,EAAIqB,KAAK,MAAO,sFAChBrB,EAAI0B,aAAe,OAEnB1B,EAAIsB,SAzEkBK,CAAiB/B,EAAYR,uBACpC,IAAImB,MAAM,cAAgBZ,EAAa,uBAhBnCiC,CAAcjC,EAAYP,uBAC9B,IAAImB,MAAM,cAAgBb,EAAa"}