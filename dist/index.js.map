{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import '@k2oss/k2-broker-core';\n\n\nmetadata = {\n    systemName: \"AWS-S3-Bucket\",\n    displayName: \"AWS S3 Bucket\",\n    description: \"Connect to your Amazon Web Services S3 Bucket.\",\n    configuration: {\n        \"AWSRegion\": {\n            \"displayName\": \"AWS Region\",\n            \"type\": \"string\",\n            \"required\": true\n        },\n        \"AWSBucketName\": {\n            \"displayName\": \"AWS Bucket Name\",\n            \"type\": \"string\",\n            \"required\": true\n        },\n        \"AWSAccessKey\": {\n            \"displayName\": \"AWS IAM User Access Key\",\n            \"type\": \"string\",\n            \"required\": true\n        },\n        \"AWSSecretKey\": {\n            \"displayName\": \"AWS IAM User Secret Key\",\n            \"type\": \"string\",\n            \"required\": true\n        }\n    }\n};\n\nondescribe = async function ({configuration}): Promise<void> {\n    postSchema({\n        objects: {\n            \"bucket\": {\n                displayName: \"Bucket\",\n                description: \"Get S3 Bucket Contents\",\n                properties: {\n                    \"key\": {\n                        displayName: \"Key\",\n                        type: \"string\",\n                    },\n                    \"lastModified\": {\n                        displayName: \"Last Modified\",\n                        type: \"dateTime\"\n                    },\n                    \"eTag\": {\n                        displayName: \"Etag\",\n                        type: \"string\"\n                    },\n                    \"size\": {\n                        displayName: \"Size\",\n                        type: \"number\"\n                    },\n                    \"storageClass\": {\n                        displayName: \"Storage Class\",\n                        type: \"number\"\n                    }\n                },\n                methods: {\n                    \"getList\": {\n                        displayName: \"Get List of Bucket Contents\",\n                        type: \"list\",\n                        inputs: [\"prefix\", \"max-keys\", \"start-after\"],\n                        outputs: [\"key\", \"lastModified\", \"eTag\", \"size\", \"storageClass\"]\n                    }\n                }\n            }\n        }\n    }\n    )\n};\n\nonexecute = async function ({objectName, methodName, parameters, properties, configuration}): Promise<void> {\n    switch (objectName) {\n        case \"posts\": await onexecutePosts(methodName, parameters, properties, configuration); break;\n        default: throw new Error(\"The object \" + objectName + \" is not supported.\");\n    }\n}\n\nasync function onexecutePosts(methodName: string, parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    switch (methodName) {\n        case \"getList\": await onexecutePostsGetList(parameters, properties, configuration); break;\n        case \"getById\": await onexecutePostsGetById(parameters, properties, configuration); break;\n        case \"getByUserId\": await onexecutePostsGetByUserId(parameters, properties, configuration); break;\n        case \"create\": await onexecutePostsCreate(parameters, properties, configuration); break;\n        case \"update\": await onexecutePostsUpdate(parameters, properties, configuration); break;\n        case \"delete\": await onexecutePostsDelete(parameters, properties, configuration); break;\n        default: throw new Error(\"The method \" + methodName + \" is not supported.\");\n    }\n}\n\nfunction onexecutePostsGetList(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n        console.log('onexecutePostsGetList');\n        console.log('https://' + metadata.configuration['AWSBucketName'] + '.s3.' + metadata.configuration['AWSRegion'] + '.amazonaws.com?list-type=2');\n        try{\n        var urlValue = 'https://' + metadata.configuration['AWSBucketName'] + '.s3.' + metadata.configuration['AWSRegion'] + '.amazonaws.com?list-type=2';\n        }\n        catch (e) {\n            throw new Error(\"Error on the urlValue | AWSBucketName: \" + metadata.configuration.AWSBucketName + 'AWSRegion: ' + metadata.configuration.AWSBucketName);\n        }\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function () {\n            try {\n                if (xhr.readyState !== 4) return;\n                if (xhr.status !== 200) throw new Error(\"Failed with status \" + xhr.status);\n\n                //console.log(xhr.responseText);\n                var obj = JSON.parse(xhr.responseText);\n                postResult(obj.map(x => {\n                    return {\n                        \"key\": x.key,\n                        \"lastModified\": x.lastModified,\n                        \"etag\": x.etag,\n                        \"size\": x.size,\n                        \"storageClass\": x.storageClass\n                    }\n                }));\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        }\n\n        xhr.open(\"GET\", urlValue);\n        xhr.send();\n    });\n\n}\n\nfunction onexecutePostsGetById(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n        var urlValue = configuration[\"ServiceURL\"] + 'posts/';\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function () {\n            try {\n                if (xhr.readyState !== 4) return;\n                if (xhr.status !== 200) throw new Error(\"Failed with status \" + xhr.status);\n\n                var obj = JSON.parse(xhr.responseText);\n                postResult({\n                    \"id\": obj.id,\n                    \"userId\": obj.userId,\n                    \"title\": obj.title,\n                    \"body\": obj.body\n                });\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        }\n\n        if(typeof properties[\"id\"] !== \"number\") throw new Error(\"properties[\\\"id\\\"] is not of type number\");\n\n        xhr.open(\"GET\", urlValue + encodeURIComponent(properties[\"id\"]));\n        xhr.send();\n    });\n}\n\nfunction onexecutePostsGetByUserId(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n        var urlValue = configuration[\"ServiceURL\"] + 'posts?userId=';\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function () {\n            try {\n                if (xhr.readyState !== 4) return;\n                if (xhr.status !== 200) throw new Error(\"Failed with status \" + xhr.status);\n\n                var obj = JSON.parse(xhr.responseText);\n                postResult(obj.map(x => {\n                    return {\n                        \"id\": x.id,\n                        \"userId\": x.userId,\n                        \"title\": x.title,\n                        \"body\": x.body\n                    }\n                }));\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n\n        }\n\n        if(typeof properties[\"userId\"] !== \"number\") throw new Error(\"properties[\\\"userId\\\"] is not of type number\");\n        xhr.open(\"GET\", urlValue + encodeURIComponent(properties[\"userId\"]));\n        xhr.send();\n    });\n}\n\n\nfunction onexecutePostsCreate(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n        var urlValue = configuration[\"ServiceURL\"] + 'posts/';\n        var data = JSON.stringify({\n            \"userId\": properties[\"userId\"],\n            \"title\": properties[\"title\"],\n            \"body\": properties[\"body\"]\n        });\n\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function () {\n            try {\n                if (xhr.readyState !== 4) return;\n                // look for 'created' code\n                if (xhr.status !== 201) throw new Error(\"Failed with status \" + xhr.status);\n\n                var obj = JSON.parse(xhr.responseText);\n                postResult({\n                    \"id\": obj.id,\n                    \"userId\": obj.userId,\n                    \"title\": obj.title,\n                    \"body\": obj.body\n                });\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        }\n        xhr.open(\"POST\", urlValue);\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n        xhr.send(data);\n    });\n}\n\nfunction onexecutePostsUpdate(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n        var urlValue = configuration[\"ServiceURL\"] + 'posts/';\n        var data = JSON.stringify({\n            \"userId\": properties[\"userId\"],\n            \"title\": properties[\"title\"],\n            \"body\": properties[\"body\"]\n        });\n\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function () {\n            try {\n                if (xhr.readyState !== 4) return;\n                if (xhr.status !== 200) throw new Error(\"Failed with status \" + xhr.status);\n\n                var obj = JSON.parse(xhr.responseText);\n                postResult({\n                    \"id\": obj.id,\n                    \"userId\": obj.userId,\n                    \"title\": obj.title,\n                    \"body\": obj.body\n                });\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        }\n\n        if(typeof properties[\"id\"] !== \"number\") throw new Error(\"properties[\\\"id\\\"] is not of type number\");\n        xhr.open(\"PUT\", urlValue + encodeURIComponent(properties[\"id\"]));\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n        xhr.send(data);\n    });\n}\n\nfunction onexecutePostsDelete(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n        var urlValue = configuration[\"ServiceURL\"];\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function () {\n            try {\n                if (xhr.readyState !== 4) return;\n                if (xhr.status !== 200) throw new Error(\"Failed with status \" + xhr.status);\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        }\n\n        if(typeof properties[\"id\"] !== \"number\") throw new Error(\"properties[\\\"id\\\"] is not of type number\");\n        xhr.open(\"DELETE\", urlValue + 'posts/' + encodeURIComponent(properties[\"id\"]));\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n        xhr.send();\n    });\n}\n"],"names":["metadata","systemName","displayName","description","configuration","ondescribe","async","postSchema","objects","properties","type","methods","inputs","outputs","onexecute","objectName","methodName","parameters","Promise","resolve","reject","console","log","urlValue","e","Error","AWSBucketName","xhr","XMLHttpRequest","onreadystatechange","readyState","status","obj","JSON","parse","responseText","postResult","map","x","key","lastModified","etag","size","storageClass","open","send","id","userId","title","body","encodeURIComponent","onexecutePostsGetById","onexecutePostsGetByUserId","data","stringify","setRequestHeader","onexecutePostsCreate","onexecutePostsUpdate","onexecutePostsDelete","onexecutePosts"],"mappings":"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"}