{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import '@k2oss/k2-broker-core';\n\nmetadata = {\n    systemName: \"AWS-S3-Bucket\",\n    displayName: \"AWS S3 Bucket\",\n    description: \"Connect to your Amazon Web Services S3 Bucket.\",\n    configuration: {\n        AWSRegion: {\n            displayName: \"AWS Region\",\n            type: \"string\",\n            value: \"us-west-2\",\n            required: true\n        },\n        AWSBucketName: {\n            displayName: \"AWS Bucket Name\",\n            type: \"string\",\n            value: \"s3-bucket-name\",\n            required: true\n        },\n        AWSAccessKey: {\n            displayName: \"AWS IAM User Access Key\",\n            type: \"string\",\n            value: \"IAM User Access Key\",\n            required: true\n        },\n        AWSSecretKey: {\n            displayName: \"AWS IAM User Secret Key\",\n            type: \"string\",\n            value: \"IAM User Secret Key\",\n            required: true\n        }\n    }\n};\n\nondescribe = async function ({configuration}): Promise<void> {\n    postSchema({\n        objects: {\n            \"bucket\": {\n                displayName: \"Bucket\",\n                description: \"Get S3 Bucket Contents\",\n                properties: {\n                    \"key\": {\n                        displayName: \"Key\",\n                        type: \"string\",\n                    },\n                    \"lastModified\": {\n                        displayName: \"Last Modified\",\n                        type: \"dateTime\"\n                    },\n                    \"eTag\": {\n                        displayName: \"Etag\",\n                        type: \"string\"\n                    },\n                    \"size\": {\n                        displayName: \"Size\",\n                        type: \"number\"\n                    },\n                    \"storageClass\": {\n                        displayName: \"Storage Class\",\n                        type: \"number\"\n                    }\n                },\n                methods: {\n                    \"getList\": {\n                        displayName: \"Get List of Bucket Contents\",\n                        type: \"list\",\n                        inputs: [\"prefix\", \"max-keys\", \"start-after\"],\n                        outputs: [\"key\", \"lastModified\", \"eTag\", \"size\", \"storageClass\"]\n                    }\n                }\n            }\n        }\n    }\n    )\n};\n\nonexecute = async function ({objectName, methodName, parameters, properties, configuration}): Promise<void> {\n    switch (objectName) {\n        case \"posts\": await onexecutePosts(methodName, parameters, properties, configuration); break;\n        default: throw new Error(\"The object \" + objectName + \" is not supported.\");\n    }\n}\n\nasync function onexecutePosts(methodName: string, parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    switch (methodName) {\n        case \"getList\": await onexecutePostsGetList(parameters, properties, configuration); break;\n        case \"getById\": await onexecutePostsGetById(parameters, properties, configuration); break;\n        case \"getByUserId\": await onexecutePostsGetByUserId(parameters, properties, configuration); break;\n        case \"create\": await onexecutePostsCreate(parameters, properties, configuration); break;\n        case \"update\": await onexecutePostsUpdate(parameters, properties, configuration); break;\n        case \"delete\": await onexecutePostsDelete(parameters, properties, configuration); break;\n        default: throw new Error(\"The method \" + methodName + \" is not supported.\");\n    }\n}\n\nfunction onexecutePostsGetList(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n        try{\n        var urlValue = 'https://' + metadata.configuration.AWSBucketName + '.s3.' + metadata.configuration.AWSRegion + '.amazonaws.com?list-type=2';\n        }\n        catch (e) {\n            throw new Error(\"Error on the urlValue | AWSBucketName: \" + metadata.configuration.AWSBucketName + 'AWSRegion: ' + metadata.configuration.AWSBucketName);\n        }\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function () {\n            try {\n                if (xhr.readyState !== 4) return;\n                if (xhr.status !== 200) throw new Error(\"Failed with status \" + xhr.status);\n\n                //console.log(xhr.responseText);\n                var obj = JSON.parse(xhr.responseText);\n                postResult(obj.map(x => {\n                    return {\n                        \"key\": x.key,\n                        \"lastModified\": x.lastModified,\n                        \"etag\": x.etag,\n                        \"size\": x.size,\n                        \"storageClass\": x.storageClass\n                    }\n                }));\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        }\n\n        xhr.open(\"GET\", urlValue);\n        xhr.send();\n    });\n\n}\n\nfunction onexecutePostsGetById(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n        var urlValue = configuration[\"ServiceURL\"] + 'posts/';\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function () {\n            try {\n                if (xhr.readyState !== 4) return;\n                if (xhr.status !== 200) throw new Error(\"Failed with status \" + xhr.status);\n\n                var obj = JSON.parse(xhr.responseText);\n                postResult({\n                    \"id\": obj.id,\n                    \"userId\": obj.userId,\n                    \"title\": obj.title,\n                    \"body\": obj.body\n                });\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        }\n\n        if(typeof properties[\"id\"] !== \"number\") throw new Error(\"properties[\\\"id\\\"] is not of type number\");\n\n        xhr.open(\"GET\", urlValue + encodeURIComponent(properties[\"id\"]));\n        xhr.send();\n    });\n}\n\nfunction onexecutePostsGetByUserId(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n        var urlValue = configuration[\"ServiceURL\"] + 'posts?userId=';\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function () {\n            try {\n                if (xhr.readyState !== 4) return;\n                if (xhr.status !== 200) throw new Error(\"Failed with status \" + xhr.status);\n\n                var obj = JSON.parse(xhr.responseText);\n                postResult(obj.map(x => {\n                    return {\n                        \"id\": x.id,\n                        \"userId\": x.userId,\n                        \"title\": x.title,\n                        \"body\": x.body\n                    }\n                }));\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n\n        }\n\n        if(typeof properties[\"userId\"] !== \"number\") throw new Error(\"properties[\\\"userId\\\"] is not of type number\");\n        xhr.open(\"GET\", urlValue + encodeURIComponent(properties[\"userId\"]));\n        xhr.send();\n    });\n}\n\n\nfunction onexecutePostsCreate(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n        var urlValue = configuration[\"ServiceURL\"] + 'posts/';\n        var data = JSON.stringify({\n            \"userId\": properties[\"userId\"],\n            \"title\": properties[\"title\"],\n            \"body\": properties[\"body\"]\n        });\n\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function () {\n            try {\n                if (xhr.readyState !== 4) return;\n                // look for 'created' code\n                if (xhr.status !== 201) throw new Error(\"Failed with status \" + xhr.status);\n\n                var obj = JSON.parse(xhr.responseText);\n                postResult({\n                    \"id\": obj.id,\n                    \"userId\": obj.userId,\n                    \"title\": obj.title,\n                    \"body\": obj.body\n                });\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        }\n        xhr.open(\"POST\", urlValue);\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n        xhr.send(data);\n    });\n}\n\nfunction onexecutePostsUpdate(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n        var urlValue = configuration[\"ServiceURL\"] + 'posts/';\n        var data = JSON.stringify({\n            \"userId\": properties[\"userId\"],\n            \"title\": properties[\"title\"],\n            \"body\": properties[\"body\"]\n        });\n\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function () {\n            try {\n                if (xhr.readyState !== 4) return;\n                if (xhr.status !== 200) throw new Error(\"Failed with status \" + xhr.status);\n\n                var obj = JSON.parse(xhr.responseText);\n                postResult({\n                    \"id\": obj.id,\n                    \"userId\": obj.userId,\n                    \"title\": obj.title,\n                    \"body\": obj.body\n                });\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        }\n\n        if(typeof properties[\"id\"] !== \"number\") throw new Error(\"properties[\\\"id\\\"] is not of type number\");\n        xhr.open(\"PUT\", urlValue + encodeURIComponent(properties[\"id\"]));\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n        xhr.send(data);\n    });\n}\n\nfunction onexecutePostsDelete(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n        var urlValue = configuration[\"ServiceURL\"];\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function () {\n            try {\n                if (xhr.readyState !== 4) return;\n                if (xhr.status !== 200) throw new Error(\"Failed with status \" + xhr.status);\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        }\n\n        if(typeof properties[\"id\"] !== \"number\") throw new Error(\"properties[\\\"id\\\"] is not of type number\");\n        xhr.open(\"DELETE\", urlValue + 'posts/' + encodeURIComponent(properties[\"id\"]));\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n        xhr.send();\n    });\n}\n"],"names":["metadata","systemName","displayName","description","configuration","AWSRegion","type","value","required","AWSBucketName","AWSAccessKey","AWSSecretKey","ondescribe","async","postSchema","objects","properties","methods","inputs","outputs","onexecute","objectName","methodName","parameters","Promise","resolve","reject","urlValue","e","Error","xhr","XMLHttpRequest","onreadystatechange","readyState","status","obj","JSON","parse","responseText","postResult","map","x","key","lastModified","etag","size","storageClass","open","send","id","userId","title","body","encodeURIComponent","onexecutePostsGetById","onexecutePostsGetByUserId","data","stringify","setRequestHeader","onexecutePostsCreate","onexecutePostsUpdate","onexecutePostsDelete","onexecutePosts"],"mappings":"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"}