{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import '@k2oss/k2-broker-core';\n\nmetadata = {\n    \"systemName\": \"JSONPlaceholder\",\n    \"displayName\": \"JSONPlaceholder Broker\",\n    \"description\": \"Sample broker for JSONPlaceholder\",\n    \"configuration\": {\n        \"ServiceURL\": {\n            displayName: \"JSONPlaceholder Service URL\",\n            type: \"string\",\n            value: \"https://jsonplaceholder.typicode.com/\"\n        }\n    }\n};\n\nondescribe = async function ({configuration}): Promise<void> {\n    postSchema({\n        objects: {\n            \"posts\": {\n                displayName: \"Posts\",\n                description: \"Manages Posts\",\n                properties: {\n                    \"id\": {\n                        displayName: \"ID\",\n                        type: \"number\"\n                    },\n                    \"userId\": {\n                        displayName: \"User ID\",\n                        type: \"number\"\n                    },\n                    \"title\": {\n                        displayName: \"Title\",\n                        type: \"string\"\n                    },\n                    \"body\": {\n                        displayName: \"Body\",\n                        type: \"string\"\n                    }\n                },\n                methods: {\n                    \"getList\": {\n                        displayName: \"Get Posts List\",\n                        type: \"list\",\n                        outputs: [\"id\", \"userId\", \"title\", \"body\"]\n                    },\n                    \"getById\": {\n                        displayName: \"Get Post By ID\",\n                        type: \"read\",\n                        inputs: [\"id\"],\n                        requiredInputs: [\"id\"],\n                        outputs: [\"id\", \"userId\", \"title\", \"body\"]\n                    },\n                    \"getByUserId\": {\n                        displayName: \"Get Posts By User ID\",\n                        type: \"list\",\n                        inputs: [\"userId\"],\n                        requiredInputs: [\"userId\"],\n                        outputs: [\"id\", \"userId\", \"title\", \"body\"]\n                    },\n                    \"create\": {\n                        displayName: \"Create Post\",\n                        type: \"create\",\n                        inputs: [\"userId\", \"title\", \"body\"],\n                        outputs: [\"id\", \"userId\", \"title\", \"body\"]\n                    },\n                    \"update\": {\n                        displayName: \"Update Post\",\n                        type: \"update\",\n                        inputs: [\"id\", \"userId\", \"title\", \"body\"],\n                        requiredInputs: [\"id\"],\n                        outputs: [\"id\", \"userId\", \"title\", \"body\"]\n                    },\n                    \"delete\": {\n                        displayName: \"Delete Post\",\n                        type: \"delete\",\n                        inputs: [\"id\"],\n                        requiredInputs: [\"id\"]\n                    }\n                }\n            },\n            \"comments\": {\n                displayName: \"Comments\",\n                description: \"Manages Comments\",\n                properties: {\n                    \"id\": {\n                        displayName: \"ID\",\n                        type: \"number\"\n                    },\n                    \"postId\": {\n                        displayName: \"Post ID\",\n                        type: \"number\"\n                    },\n                    \"name\": {\n                        displayName: \"Name\",\n                        type: \"string\"\n                    },\n                    \"email\": {\n                        displayName: \"Email\",\n                        type: \"string\"\n                    },\n                    \"body\": {\n                        displayName: \"Body\",\n                        type: \"string\"\n                    }\n                },\n                methods: {\n                    \"getList\": {\n                        displayName: \"Get Comments List\",\n                        type: \"list\",\n                        outputs: [\"id\", \"postId\", \"name\", \"email\", \"body\"]\n                    },\n                    \"getById\": {\n                        displayName: \"Get Comment By ID\",\n                        type: \"read\",\n                        inputs: [\"id\"],\n                        requiredInputs: [\"id\"],\n                        outputs: [\"id\", \"postId\", \"name\", \"email\", \"body\"]\n                    },\n                    \"getByPostId\": {\n                        displayName: \"Get Comments By Post ID\",\n                        type: \"list\",\n                        inputs: [\"postId\"],\n                        requiredInputs: [\"postId\"],\n                        outputs: [\"id\", \"postId\", \"name\", \"email\", \"body\"]\n                    }\n                }\n            },\n            \"todos\": {\n                displayName: \"To Do\",\n                description: \"Manages To Dos\",\n                properties: {\n                    \"id\": {\n                        displayName: \"ID\",\n                        type: \"number\"\n                    },\n                    \"userId\": {\n                        displayName: \"User ID\",\n                        type: \"number\"\n                    },\n                    \"title\": {\n                        displayName: \"Title\",\n                        type: \"string\"\n                    },\n                    \"completed\": {\n                        displayName: \"Completed\",\n                        type: \"boolean\"\n                    }\n                },\n                methods: {\n                    \"getList\": {\n                        displayName: \"Get To Dos List\",\n                        type: \"list\",\n                        outputs: [\"id\", \"userId\", \"title\", \"completed\"]\n                    },\n                    \"getById\": {\n                        displayName: \"Get To Do By ID\",\n                        type: \"read\",\n                        inputs: [\"id\"],\n                        requiredInputs: [\"id\"],\n                        outputs: [\"id\", \"userId\", \"title\", \"completed\"]\n                    }\n                }\n            },\n            \"users\": {\n                displayName: \"Users\",\n                description: \"Manages Users\",\n                properties: {\n                    \"id\": {\n                        displayName: \"ID\",\n                        type: \"number\"\n                    },\n                    \"name\": {\n                        displayName: \"Name\",\n                        type: \"string\"\n                    },\n                    \"username\": {\n                        displayName: \"User Name\",\n                        type: \"string\"\n                    },\n                    \"email\": {\n                        displayName: \"Email\",\n                        type: \"string\"\n                    },\n                    \"addressStreet\": {\n                        displayName: \"Address.Street\",\n                        type: \"string\"\n                    },\n                    \"addressSuite\": {\n                        displayName: \"Address.Suite\",\n                        type: \"string\"\n                    },\n                    \"addressCity\": {\n                        displayName: \"Address.City\",\n                        type: \"string\"\n                    },\n                    \"addressGeoLat\": {\n                        displayName: \"Address.Geo.Latitude\",\n                        type: \"string\"\n                    },\n                    \"addressGeoLng\": {\n                        displayName: \"Address.Get.Longitude\",\n                        type: \"string\"\n                    },\n                    \"phone\": {\n                        displayName: \"Phone\",\n                        type: \"string\"\n                    },\n                    \"website\": {\n                        displayName: \"Website\",\n                        type: \"string\"\n                    },\n                    \"companyName\": {\n                        displayName: \"Company.Name\",\n                        type: \"string\"\n                    },\n                    \"companyCatchPhrase\": {\n                        displayName: \"Company.CatchPhrase\",\n                        type: \"string\"\n                    },\n                    \"companyBs\": {\n                        displayName: \"Company.BS\",\n                        type: \"string\"\n                    }\n                },\n                methods: {\n                    \"getList\": {\n                        displayName: \"Get Users List\",\n                        type: \"list\",\n                        outputs: [\"id\",\n                            \"name\",\n                            \"username\",\n                            \"email\",\n                            \"addressStreet\",\n                            \"addressSuite\",\n                            \"addressCity\",\n                            \"addressGeoLat\",\n                            \"addressGeoLng\",\n                            \"phone\",\n                            \"website\",\n                            \"companyName\",\n                            \"companyCatchPhrase\",\n                            \"companyBs\"]\n                    },\n                    \"getById\": {\n                        displayName: \"Get Users By ID\",\n                        type: \"read\",\n                        inputs: [\"id\"],\n                        requiredInputs: [\"id\"],\n                        outputs: [\"id\",\n                            \"name\",\n                            \"username\",\n                            \"email\",\n                            \"addressStreet\",\n                            \"addressSuite\",\n                            \"addressCity\",\n                            \"addressGeoLat\",\n                            \"addressGeoLng\",\n                            \"phone\",\n                            \"website\",\n                            \"companyName\",\n                            \"companyCatchPhrase\",\n                            \"companyBs\"]\n                    }\n                }\n            }\n        }\n    }\n    )\n};\n\nonexecute = async function ({objectName, methodName, parameters, properties, configuration}): Promise<void> {\n    switch (objectName) {\n        case \"posts\": await onexecutePosts(methodName, parameters, properties, configuration); break;\n        case \"comments\": await onexecuteComments(methodName, parameters, properties, configuration); break;\n        case \"todos\": await onexecuteToDos(methodName, parameters, properties, configuration); break;\n        case \"users\": await onexecuteUsers(methodName, parameters, properties, configuration); break;\n        default: throw new Error(\"The object \" + objectName + \" is not supported.\");\n    }\n}\n\nasync function onexecutePosts(methodName: string, parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    switch (methodName) {\n        case \"getList\": await onexecutePostsGetList(parameters, properties, configuration); break;\n        case \"getById\": await onexecutePostsGetById(parameters, properties, configuration); break;\n        case \"getByUserId\": await onexecutePostsGetByUserId(parameters, properties, configuration); break;\n        case \"create\": await onexecutePostsCreate(parameters, properties, configuration); break;\n        case \"update\": await onexecutePostsUpdate(parameters, properties, configuration); break;\n        case \"delete\": await onexecutePostsDelete(parameters, properties, configuration); break;\n        default: throw new Error(\"The method \" + methodName + \" is not supported.\");\n    }\n}\n\nasync function onexecuteComments(methodName: string, parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    switch (methodName) {\n        case \"getList\": await onexecuteCommentsGetList(parameters, properties, configuration); break;\n        case \"getById\": await onexecuteCommentsGetById(parameters, properties, configuration); break;\n        case \"getByPostId\": await onexecuteCommentsGetByPostId(parameters, properties, configuration); break;\n        default: throw new Error(\"The method \" + methodName + \" is not supported.\");\n    }\n}\n\nasync function onexecuteToDos(methodName: string, parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    switch (methodName) {\n        case \"getList\": await onexecuteToDosGetList(parameters, properties, configuration); break;\n        case \"getById\": await onexecuteToDosGetById(parameters, properties, configuration); break;\n        default: throw new Error(\"The method \" + methodName + \" is not supported.\");\n    }\n}\n\nasync function onexecuteUsers(methodName: string, parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    switch (methodName) {\n        case \"getList\": await onexecuteUsersGetList(parameters, properties, configuration); break;\n        case \"getById\": await onexecuteUsersGetById(parameters, properties, configuration); break;\n        default: throw new Error(\"The method \" + methodName + \" is not supported.\");\n    }\n}\n\nfunction onexecutePostsGetList(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n        var urlValue = configuration[\"ServiceURL\"] + 'posts/';\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function () {\n            try {\n                if (xhr.readyState !== 4) return;\n                if (xhr.status !== 200) throw new Error(\"Failed with status \" + xhr.status);\n\n                //console.log(xhr.responseText);\n                var obj = JSON.parse(xhr.responseText);\n                postResult(obj.map(x => {\n                    return {\n                        \"id\": x.id,\n                        \"userId\": x.userId,\n                        \"title\": x.title,\n                        \"body\": x.body\n                    }\n                }));\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        }\n\n        xhr.open(\"GET\", urlValue);\n        xhr.send();\n    });\n\n}\n\nfunction onexecutePostsGetById(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n        var urlValue = configuration[\"ServiceURL\"] + 'posts/';\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function () {\n            try {\n                if (xhr.readyState !== 4) return;\n                if (xhr.status !== 200) throw new Error(\"Failed with status \" + xhr.status);\n\n                var obj = JSON.parse(xhr.responseText);\n                postResult({\n                    \"id\": obj.id,\n                    \"userId\": obj.userId,\n                    \"title\": obj.title,\n                    \"body\": obj.body\n                });\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        }\n\n        if(typeof properties[\"id\"] !== \"number\") throw new Error(\"properties[\\\"id\\\"] is not of type number\");\n\n        xhr.open(\"GET\", urlValue + encodeURIComponent(properties[\"id\"]));\n        xhr.send();\n    });\n}\n\nfunction onexecutePostsGetByUserId(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n        var urlValue = configuration[\"ServiceURL\"] + 'posts?userId=';\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function () {\n            try {\n                if (xhr.readyState !== 4) return;\n                if (xhr.status !== 200) throw new Error(\"Failed with status \" + xhr.status);\n\n                var obj = JSON.parse(xhr.responseText);\n                postResult(obj.map(x => {\n                    return {\n                        \"id\": x.id,\n                        \"userId\": x.userId,\n                        \"title\": x.title,\n                        \"body\": x.body\n                    }\n                }));\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n\n        }\n\n        if(typeof properties[\"userId\"] !== \"number\") throw new Error(\"properties[\\\"userId\\\"] is not of type number\");\n        xhr.open(\"GET\", urlValue + encodeURIComponent(properties[\"userId\"]));\n        xhr.send();\n    });\n}\n\n\nfunction onexecutePostsCreate(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n        var urlValue = configuration[\"ServiceURL\"] + 'posts/';\n        var data = JSON.stringify({\n            \"userId\": properties[\"userId\"],\n            \"title\": properties[\"title\"],\n            \"body\": properties[\"body\"]\n        });\n\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function () {\n            try {\n                if (xhr.readyState !== 4) return;\n                // look for 'created' code\n                if (xhr.status !== 201) throw new Error(\"Failed with status \" + xhr.status);\n\n                var obj = JSON.parse(xhr.responseText);\n                postResult({\n                    \"id\": obj.id,\n                    \"userId\": obj.userId,\n                    \"title\": obj.title,\n                    \"body\": obj.body\n                });\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        }\n        xhr.open(\"POST\", urlValue);\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n        xhr.send(data);\n    });\n}\n\nfunction onexecutePostsUpdate(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n        var urlValue = configuration[\"ServiceURL\"] + 'posts/';\n        var data = JSON.stringify({\n            \"userId\": properties[\"userId\"],\n            \"title\": properties[\"title\"],\n            \"body\": properties[\"body\"]\n        });\n\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function () {\n            try {\n                if (xhr.readyState !== 4) return;\n                if (xhr.status !== 200) throw new Error(\"Failed with status \" + xhr.status);\n\n                var obj = JSON.parse(xhr.responseText);\n                postResult({\n                    \"id\": obj.id,\n                    \"userId\": obj.userId,\n                    \"title\": obj.title,\n                    \"body\": obj.body\n                });\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        }\n\n        if(typeof properties[\"id\"] !== \"number\") throw new Error(\"properties[\\\"id\\\"] is not of type number\");\n        xhr.open(\"PUT\", urlValue + encodeURIComponent(properties[\"id\"]));\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n        xhr.send(data);\n    });\n}\n\nfunction onexecutePostsDelete(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n        var urlValue = configuration[\"ServiceURL\"];\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function () {\n            try {\n                if (xhr.readyState !== 4) return;\n                if (xhr.status !== 200) throw new Error(\"Failed with status \" + xhr.status);\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        }\n\n        if(typeof properties[\"id\"] !== \"number\") throw new Error(\"properties[\\\"id\\\"] is not of type number\");\n        xhr.open(\"DELETE\", urlValue + 'posts/' + encodeURIComponent(properties[\"id\"]));\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n        xhr.send();\n    });\n}\n\nfunction onexecuteCommentsGetList(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n        var urlValue = configuration[\"ServiceURL\"] + 'comments';\n        var xhr = new XMLHttpRequest();\n\n        xhr.onreadystatechange = function () {\n            try {\n                if (xhr.readyState !== 4) return;\n                if (xhr.status !== 200) throw new Error(\"Failed with status \" + xhr.status);\n                var obj = JSON.parse(xhr.responseText);\n                postResult(obj.map(x => {\n                    return {\n                        \"id\": x.id,\n                        \"postId\": x.postId,\n                        \"name\": x.name,\n                        \"email\": x.email,\n                        \"body\": x.body\n                    }\n                }));\n                resolve();\n            } catch (error) {\n                reject(error);\n            }\n        }\n        xhr.open(\"GET\", urlValue);\n        xhr.send();\n    });\n}\n\nfunction onexecuteCommentsGetById(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n        var urlValue = configuration[\"ServiceURL\"];\n        var xhr = new XMLHttpRequest();\n\n        xhr.onreadystatechange = function () {\n            try {\n                if (xhr.readyState !== 4) return;\n                if (xhr.status !== 200) throw new Error(\"Failed with status \" + xhr.status);\n\n                var obj = JSON.parse(xhr.responseText);\n                postResult({\n                    \"id\": obj.id,\n                    \"postId\": obj.postId,\n                    \"name\": obj.name,\n                    \"email\": obj.email,\n                    \"body\": obj.body\n                });\n                resolve();\n            } catch (error) {\n                reject(error);\n            }\n        }\n\n        if(typeof properties[\"id\"] !== \"number\") throw new Error(\"properties[\\\"id\\\"] is not of type number\");\n        xhr.open(\"GET\", urlValue + 'comments/' + encodeURIComponent(properties[\"id\"]));\n        xhr.send();\n    });\n}\n\nfunction onexecuteCommentsGetByPostId(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n        var urlValue = configuration[\"ServiceURL\"];\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function () {\n            try {\n                if (xhr.readyState !== 4) return;\n                if (xhr.status !== 200) throw new Error(\"Failed with status \" + xhr.status);\n\n                var obj = JSON.parse(xhr.responseText);\n                postResult(obj.map(x => {\n                    return {\n                        \"id\": x.id,\n                        \"postId\": x.postId,\n                        \"name\": x.name,\n                        \"email\": x.email,\n                        \"body\": x.body\n                    }\n                }));\n                resolve();\n            } catch (error) {\n                reject(error);\n            }\n\n        }\n\n        if(typeof properties[\"postId\"] !== \"number\") throw new Error(\"properties[\\\"postId\\\"] is not of type number\");\n        xhr.open(\"GET\", urlValue + 'comments?postId=' + encodeURIComponent(properties[\"postId\"]));\n        xhr.send();\n    });\n}\n\nfunction onexecuteToDosGetList(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n        var urlValue = configuration[\"ServiceURL\"];\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function () {\n            try {\n                if (xhr.readyState !== 4) return;\n                if (xhr.status !== 200) throw new Error(\"Failed with status \" + xhr.status);\n\n                var obj = JSON.parse(xhr.responseText);\n                postResult(obj.map(x => {\n                    return {\n                        \"id\": x.id,\n                        \"userId\": x.userId,\n                        \"title\": x.title,\n                        \"completed\": x.completed\n                    }\n                }));\n                resolve();\n            } catch (error) {\n                reject(error);\n            }\n\n        }\n        xhr.open(\"GET\", urlValue + 'todos/');\n        xhr.send();\n    });\n}\n\nfunction onexecuteToDosGetById(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n        var urlValue = configuration[\"ServiceURL\"];\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function () {\n            try {\n                if (xhr.readyState !== 4) return;\n                if (xhr.status !== 200) throw new Error(\"Failed with status \" + xhr.status);\n\n                var obj = JSON.parse(xhr.responseText);\n                postResult({\n                    \"id\": obj.id,\n                    \"userId\": obj.userId,\n                    \"title\": obj.title,\n                    \"completed\": obj.completed\n                });\n                resolve();\n            } catch (error) {\n                reject(error);\n            }\n\n        }\n\n        if(typeof properties[\"id\"] !== \"number\") throw new Error(\"properties[\\\"id\\\"] is not of type number\");\n        xhr.open(\"GET\", urlValue + 'todos/' + encodeURIComponent(properties[\"id\"]));\n        xhr.send();\n    });\n}\n\nfunction onexecuteUsersGetList(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n        var urlValue = configuration[\"ServiceURL\"];\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function () {\n            try {\n                if (xhr.readyState !== 4) return;\n                if (xhr.status !== 200) throw new Error(\"Failed with status \" + xhr.status);\n\n                var obj = JSON.parse(xhr.responseText);\n                postResult(obj.map(x => {\n                    return {\n                        \"id\": x.id,\n                        \"name\": x.name,\n                        \"username\": x.username,\n                        \"email\": x.email,\n                        \"addressStreet\": x.address.street,\n                        \"addressSuite\": x.address.suite,\n                        \"addressCity\": x.address.city,\n                        \"addressGeoLat\": x.address.geo.lat,\n                        \"addressGeoLng\": x.address.geo.lng,\n                        \"phone\": x.phone,\n                        \"website\": x.website,\n                        \"companyName\": x.company.name,\n                        \"companyCatchPhrase\": x.company.catchPhrase,\n                        \"companyBs\": x.company.bs\n                    }\n                }));\n                resolve();\n            } catch (error) {\n                reject(error);\n            }\n\n        }\n        xhr.open(\"GET\", urlValue + 'users/');\n        xhr.send();\n    });\n}\n\nfunction onexecuteUsersGetById(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n        var urlValue = configuration[\"ServiceURL\"];\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function () {\n            try {\n                if (xhr.readyState !== 4) return;\n                if (xhr.status !== 200) throw new Error(\"Failed with status \" + xhr.status);\n\n                var obj = JSON.parse(xhr.responseText);\n                postResult({\n                    \"id\": obj.id,\n                    \"name\": obj.name,\n                    \"username\": obj.username,\n                    \"email\": obj.email,\n                    \"addressStreet\": obj.address.street,\n                    \"addressSuite\": obj.address.suite,\n                    \"addressCity\": obj.address.city,\n                    \"addressGeoLat\": obj.address.geo.lat,\n                    \"addressGeoLng\": obj.address.geo.lng,\n                    \"phone\": obj.phone,\n                    \"website\": obj.website,\n                    \"companyName\": obj.company.name,\n                    \"companyCatchPhrase\": obj.company.catchPhrase,\n                    \"companyBs\": obj.company.bs\n                });\n                resolve();\n            } catch (error) {\n                reject(error);\n            }\n        }\n\n        if(typeof properties[\"id\"] !== \"number\") throw new Error(\"properties[\\\"id\\\"] is not of type number\");\n        xhr.open(\"GET\", urlValue + 'users/' + encodeURIComponent(properties[\"id\"]));\n        xhr.send();\n    });\n}"],"names":["metadata","displayName","type","value","ondescribe","async","configuration","postSchema","objects","description","properties","methods","outputs","inputs","requiredInputs","onexecute","objectName","methodName","parameters","Promise","resolve","reject","urlValue","xhr","XMLHttpRequest","onreadystatechange","readyState","status","Error","obj","JSON","parse","responseText","postResult","map","x","id","userId","title","body","e","open","send","onexecutePostsGetList","encodeURIComponent","onexecutePostsGetById","onexecutePostsGetByUserId","data","stringify","setRequestHeader","onexecutePostsCreate","onexecutePostsUpdate","onexecutePostsDelete","onexecutePosts","postId","name","email","error","onexecuteCommentsGetList","onexecuteCommentsGetById","onexecuteCommentsGetByPostId","onexecuteComments","completed","onexecuteToDosGetList","onexecuteToDosGetById","onexecuteToDos","username","address","street","suite","city","geo","lat","lng","phone","website","company","catchPhrase","bs","onexecuteUsersGetList","onexecuteUsersGetById","onexecuteUsers"],"mappings":"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"}