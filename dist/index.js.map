{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import '@k2oss/k2-broker-core';\n\nmetadata = {\n    systemName: \"AWS-S3-Bucket\",\n    displayName: \"AWS S3 Bucket\",\n    description: \"Connect to your Amazon Web Services S3 Bucket.\",\n    configuration: {\n        AWSRegion: {\n            displayName: \"AWS Region\",\n            type: \"string\",\n            value: \"us-west-2\",\n            required: true\n        },\n        AWSBucketName: {\n            displayName: \"AWS Bucket Name\",\n            type: \"string\",\n            value: \"s3-bucket-name\",\n            required: true\n        },\n        AWSAccessKey: {\n            displayName: \"AWS IAM User Access Key\",\n            type: \"string\",\n            value: \"IAM User Access Key\",\n            required: true\n        },\n        AWSSecretKey: {\n            displayName: \"AWS IAM User Secret Key\",\n            type: \"string\",\n            value: \"IAM User Secret Key\",\n            required: true\n        }\n    }\n};\n\nondescribe = async function({configuration}): Promise<void> {\n    postSchema({\n        objects: {\n            \"AWS-S3-Bucket\": {\n                displayName: \"AWS S3 Bucket Contents\",\n                description: \"Get S3 Bucket Content List of Objects\",\n                properties: {\n                    \"Key\": {\n                        displayName: \"Key\",\n                        type: \"string\",\n                    },\n                    \"LastModified\": {\n                        displayName: \"Last Modified\",\n                        type: \"dateTime\"\n                    },\n                    \"ETag\": {\n                        displayName: \"Etag\",\n                        type: \"string\"\n                    },\n                    \"Size\": {\n                        displayName: \"Size\",\n                        type: \"number\"\n                    },\n                    \"StorageClass\": {\n                        displayName: \"Storage Class\",\n                        type: \"number\"\n                    }\n                },\n                methods: {\n                    \"getBucketContents\": {\n                        displayName: \"Get Bucket Contents\",\n                        type: \"list\",\n                        parameters: {\n                            \"prefix\" : { displayName: \"Prefix\", description: \"Directory Path\", type: \"string\"},\n                            \"max-keys\" : { displayName: \"Max Keys\", description: \"Number of Records to List. The Take.\", type: \"number\"},\n                            \"start-after\" : { displayName: \"Start After\", description: \"Key to Start After for Pagination. The Skip.\", type: \"string\"}\n                        },\n                        outputs: [ \"Key\", \"LastModified\", \"ETag\", \"Size\", \"StorageClass\" ]\n                    }\n                }\n            },\n            \"AWS-S3-File\": {\n                displayName: \"AWS S3 Bucket Contents\",\n                description: \"Get S3 Bucket Content List of Objects\",\n                properties: {\n                    \"Key\": {\n                        displayName: \"Key\",\n                        type: \"string\",\n                    }\n                },\n                methods: {\n                    \"create\": {\n                        displayName: \"Persist a file to S3\",\n                        type: \"read\",\n                        parameters: {\n                            \"Key\" : { displayName: \"Key\", description: \"File Path, Name and Extension\", type: \"string\"} \n                        },\n                        outputs: [\"Key\"]\n                    },\n                    \"delete\": {\n                        displayName: \"Remove a file from S3\",\n                        type: \"delete\",\n                        parameters: {\n                            \"Key\" : { displayName: \"Key\", description: \"File Path, Name and Extension\", type: \"string\"} \n                        },\n                        outputs: [\"Key\"]\n                    }\n                }\n            }\n        }\n    });\n}\n\nonexecute = async function({objectName, methodName, parameters, properties, configuration, schema}): Promise<void> {\n    switch (objectName)\n    {\n        case \"AWS-S3-Bucket\": await onexecuteBucket(methodName, properties, parameters); break;\n        case \"AWS-S3-File\": await onexecuteFile(methodName, properties, parameters); break;\n        default: throw new Error(\"The object \" + objectName + \" is not supported.\");\n    }\n}\n\nasync function onexecuteBucket(methodName: string, properties: SingleRecord, parameters: SingleRecord): Promise<void> {\n    switch (methodName)\n    {\n        case \"getBucketContents\": await onexecuteGetBucketContents(properties, parameters); break;\n        default: throw new Error(\"The method \" + methodName + \" is not supported.\");\n    }\n}\n\nasync function onexecuteFile(methodName: string, properties: SingleRecord, parameters: SingleRecord): Promise<void> {\n    switch (methodName)\n    {\n        case \"create\": await onexecuteCreateFile(properties, parameters); break;\n        case \"delete\": await onexecuteDeleteFile(properties, parameters); break;\n        default: throw new Error(\"The method \" + methodName + \" is not supported.\");\n    }\n}\n\nfunction onexecuteGetBucketContents(properties: SingleRecord, parameters): Promise<void> {\n    return new Promise<void>((resolve, reject) =>\n    {\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function() {\n            try {\n                if (xhr.readyState !== 4) return;\n                if (xhr.status !== 200) throw new Error(\"Failed with status \" + xhr.status);\n\n                var obj = JSON.parse(xhr.responseText);\n                postResult({\n                    \"Key\": obj.Key,\n                    \"LastModified\": obj.LastModified,\n                    \"ETag\": obj.ETag,\n                    \"Size\": obj.Size,\n                    \"StorageClass\": obj.StorageClass\n                });\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        };\n        \n        if(typeof properties[\"Key\"] !== \"string\") throw new Error(\"properties[\\\"Key\\\"] is not of type string\");\n        xhr.open(\"GET\", 'https://' + metadata.configuration.AWSBucketName + '.s3.' + metadata.configuration.AWSRegion + '.amazonaws.com?list-type=2&max-keys=' + encodeURIComponent(parameters['max-keys']) + '&prefix=' + encodeURIComponent(parameters['prefix']) + '&start-after=' + encodeURIComponent(parameters['start=after']) + encodeURIComponent(properties[\"Key\"]));\n        xhr.setRequestHeader('aws', 'aws s3 k2 jssp test');\n        xhr.send();\n    });\n}\n\nfunction onexecuteCreateFile(properties: SingleRecord, parameters): Promise<void> {\n    return new Promise<void>((resolve, reject) =>\n    {\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function() {\n            try {\n                postResult({\n                    \"Key\": parameters[\"Key\"]\n                });\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        }\n        \n        if(typeof properties[\"Key\"] !== \"string\") throw new Error(\"properties[\\\"Key\\\"] is not of type string\");\n        xhr.open(\"POST\", 'https://' + metadata.configuration.AWSBucketName + '.s3.' + metadata.configuration.AWSRegion + '.amazonaws.com?list-type=2&max-keys=' + encodeURIComponent(parameters['max-keys']) + '&prefix=' + encodeURIComponent(parameters['prefix']) + '&start-after=' + encodeURIComponent(parameters['start=after']) + encodeURIComponent(properties[\"Key\"]));\n        xhr.setRequestHeader('aws', 'aws s3 k2 jssp test');\n        xhr.send();\n    });\n}\n\nfunction onexecuteDeleteFile(properties: SingleRecord, parameters): Promise<void> {\n    return new Promise<void>((resolve, reject) =>\n    {\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function() {\n            try {\n                postResult({\n                    \"Key\": parameters[\"Key\"]\n                });\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        }\n        \n        if(typeof properties[\"Key\"] !== \"string\") throw new Error(\"properties[\\\"Key\\\"] is not of type string\");\n        xhr.open(\"DELETE\", 'https://' + metadata.configuration.AWSBucketName + '.s3.' + metadata.configuration.AWSRegion + '.amazonaws.com?list-type=2&max-keys=' + encodeURIComponent(parameters['max-keys']) + '&prefix=' + encodeURIComponent(parameters['prefix']) + '&start-after=' + encodeURIComponent(parameters['start=after']) + encodeURIComponent(properties[\"Key\"]));\n        xhr.setRequestHeader('aws', 'aws s3 k2 jssp test');\n        xhr.send();\n    });\n}"],"names":["metadata","systemName","displayName","description","configuration","AWSRegion","type","value","required","AWSBucketName","AWSAccessKey","AWSSecretKey","ondescribe","async","postSchema","objects","properties","methods","parameters","outputs","onexecute","objectName","methodName","schema","Promise","resolve","reject","xhr","XMLHttpRequest","onreadystatechange","readyState","status","Error","obj","JSON","parse","responseText","postResult","Key","LastModified","ETag","Size","StorageClass","e","open","encodeURIComponent","setRequestHeader","send","onexecuteGetBucketContents","onexecuteBucket","onexecuteCreateFile","onexecuteDeleteFile","onexecuteFile"],"mappings":"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"}