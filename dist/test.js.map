{"version":3,"file":"test.js","sources":["../src/test.ts"],"sourcesContent":["import test from 'ava';\nimport '@k2oss/k2-broker-core/test-framework';\nimport './index';\n\nfunction mock(name: string, value: any) {\n    global[name] = value;\n}\n\ntest('gets list of documents', async t => {\n\n    let result: any = null;\n    function pr(r: any) { result = r; }\n    mock('postResult', pr!);\n\n    mock('XMLHttpRequest', XHR);\n\n    await Promise.resolve<void>(onexecute(\n        {\n            objectName: 'bucket',\n            methodName: 'getList',\n            properties: {\n                \"key\": '',\n                \"lastModified\": '',\n                \"eTag\": '',\n                \"size\": '',\n                \"storageClass\": ''\n            },\n            parameters: {},\n            schema: {},\n            configuration: {\n                AWSRegion: \"us-west-2\",\n                AWSBucketName: 'k2-jssp-bucket',\n                AWSAccessKey: 'AKIATUIIRTY6YUP4K37S',\n                AWSSecretKey: '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'\n            }\n        }\n    ))\n\n    // t.deepEqual(result, {}) -fill this out when we know what the result will be.\n\n})\n\nclass XHR {\n    public onreadystatechange: () => void;\n    public readyState: number;\n    public status: number;\n    public responseText: string;\n    private recorder: { [key: string]: any };\n\n    constructor(xhr) {\n        xhr = this.recorder = {}; this.recorder.headers = {};\n        console.log('Starting XHR Test');\n    }\n    open(method: string, url: string) { this.recorder.opened = { method, url }; }\n    setRequestHeader(key: string, value: string) { this.recorder.headers[key] = value; }\n\n    async send(payload) {\n        const request = require('request')\n        const options = { method: this.recorder.opened.method, url: this.recorder.opened.url, headers: this.recorder.headers, body: payload };\n        let promise = new Promise((resolve, reject) => {\n            try {\n                request(options, (error, res, body) => {\n                    if (error) { console.error(\"error inside request:\" + error)\n                    return } this.responseText = body;\n                    this.readyState = 4; this.status = 200; this.onreadystatechange(); resolve()\n                    delete this.responseText;\n                });\n            } catch (err) {\n                console.log(\"error outside request\" + err); reject()\n            }\n        }).catch((err) => { console.log(\"Promise Error:\" + err); });\n        // let v = await promise;\n    }\n}\n\n// test('describe returns the hardcoded instance', async t => {\n//     let schema = null;\n//     mock('postSchema', function(result: any) {\n//         schema = result;\n//     });\n\n//     await Promise.resolve<void>(ondescribe({\n//         configuration: {}\n//     }));\n\n//     t.deepEqual(schema, {\n//         objects: {\n//             \"todo\": {\n//                 displayName: \"TODO\",\n//                 description: \"Manages a TODO list\",\n//                 properties: {\n//                     \"id\": {\n//                         displayName: \"ID\",\n//                         type: \"number\"\n//                     },\n//                     \"userId\": {\n//                         displayName: \"User ID\",\n//                         type: \"number\"\n//                     },\n//                     \"title\": {\n//                         displayName: \"Title\",\n//                         type: \"string\"\n//                     },\n//                     \"completed\": {\n//                         displayName: \"Completed\",\n//                         type: \"boolean\"\n//                     }\n//                 },\n//                 methods: {\n//                     \"get\": {\n//                         displayName: \"Get TODO\",\n//                         type: \"read\",\n//                         inputs: [ \"id\" ],\n//                         outputs: [ \"id\", \"userId\", \"title\", \"completed\" ]\n//                     },\n//                     \"getParams\": {\n//                         displayName: \"Get TODO\",\n//                         type: \"read\",\n//                         parameters: {\n//                             \"pid\" : { displayName: \"param1\", description: \"Description Of Param 1\", type: \"number\"} \n//                         },\n//                         requiredParameters: [ \"pid\" ],\n//                         outputs: [ \"id\" ]\n//                     }\n//                 }\n//             }\n//         }\n//     });\n\n//     t.pass();\n// });\n\n// test('execute fails with the wrong parameters', async t => {\n//     let error = await t.throwsAsync(Promise.resolve<void>(onexecute({\n//         objectName: 'test1',\n//         methodName: 'unused',\n//         parameters: {},\n//         properties: {},\n//         configuration: {},\n//         schema: {}\n//     })));\n\n//     t.deepEqual(error.message, 'The object test1 is not supported.');\n\n//     error = await t.throwsAsync(Promise.resolve<void>(onexecute({\n//         objectName: 'todo',\n//         methodName: 'test2',\n//         parameters: {},\n//         properties: {},\n//         configuration: {},\n//         schema: {}\n//     })));\n\n//     t.deepEqual(error.message, 'The method test2 is not supported.');\n\n//     t.pass();\n// });\n\n// test('execute passes with method params', async t => {\n//     let result: any = null;\n//     function pr(r: any) {\n//         result = r;\n//     }\n\n//     mock('postResult', pr);\n\n//     await Promise.resolve<void>(onexecute({\n//         objectName: 'todo',\n//         methodName: 'getParams',\n//         parameters: {\n//             pid: 456\n//         },\n//         properties: {},\n//         configuration: {},\n//         schema: {}\n//     }));\n\n//     t.deepEqual(result, {\n//         id: 456\n//     });\n\n//     t.pass();\n// });\n\n// test('execute passes', async t => {\n\n//     let xhr: {[key:string]: any} = null;\n//     class XHR {\n//         public onreadystatechange: () => void;\n//         public readyState: number;\n//         public status: number;\n//         public responseText: string;\n//         private recorder: {[key:string]: any};\n\n//         constructor() {\n//             xhr = this.recorder = {};\n//             this.recorder.headers = {};\n//         }\n\n//         open(method: string, url: string) {\n//             this.recorder.opened = {method, url};   \n//         }\n\n//         setRequestHeader(key: string, value: string) {\n//             this.recorder.headers[key] = value;\n//         }\n\n//         send() {\n//             queueMicrotask(() =>\n//             {\n//                 this.readyState = 4;\n//                 this.status = 200;\n//                 this.responseText = JSON.stringify({\n//                     \"id\": 123,\n//                     \"userId\": 51,\n//                     \"title\": \"Groceries\",\n//                     \"completed\": false\n//                 });\n//                 this.onreadystatechange();\n//                 delete this.responseText;\n//             });\n//         }\n//     }\n\n//     mock('XMLHttpRequest', XHR);\n\n//     let result: any = null;\n//     function pr(r: any) {\n//         result = r;\n//     }\n\n//     mock('postResult', pr);\n\n//     await Promise.resolve<void>(onexecute({\n//         objectName: 'todo',\n//         methodName: 'get',\n//         parameters: {},\n//         properties: {\n//             \"id\": 123\n//         },\n//         configuration: {},\n//         schema: {}\n//     }));\n\n//     t.deepEqual(xhr, {\n//         opened: {\n//             method: 'GET',\n//             url: 'https://jsonplaceholder.typicode.com/todos/123'\n//         },\n//         headers: {\n//             'test': 'test value'\n//         }\n//     });\n\n//     t.deepEqual(result, {\n//         id: 123,\n//         userId: 51,\n//         title: \"Groceries\",\n//         completed: false\n//     });\n\n//     t.pass();\n// });"],"names":["mock","name","value","global","test","t","pr","r","XHR","Promise","resolve","onexecute","objectName","methodName","properties","parameters","schema","configuration","AWSRegion","AWSBucketName","AWSAccessKey","AWSSecretKey","constructor","xhr","recorder","headers","console","log","open","method","url","opened","setRequestHeader","key","send","payload","request","require","options","body","promise","reject","error","res","responseText","readyState","status","onreadystatechange","err","catch"],"mappings":"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"}