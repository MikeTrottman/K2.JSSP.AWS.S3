{"version":3,"file":"test.js","sources":["../src/test.ts"],"sourcesContent":["import test from 'ava';\r\nimport '@k2oss/k2-broker-core/test-framework';\r\nimport './index';\r\n\r\nfunction mock(name: string, value: any) {\r\n    global[name] = value;\r\n}\r\n\r\ntest('gets list of documents', async t => {\r\n\r\n    let result: any = null;\r\n    function pr(r: any) { result = r; }\r\n    mock('postResult', pr!);\r\n\r\n    mock('XMLHttpRequest', XHR);\r\n\r\n    await Promise.resolve<void>(onexecute(\r\n        {\r\n            objectName: 'bucket',\r\n            methodName: 'getList',\r\n            properties: {\r\n                \"key\": '',\r\n                \"lastModified\": '',\r\n                \"eTag\": '',\r\n                \"size\": '',\r\n                \"storageClass\": ''\r\n            },\r\n            parameters: {},\r\n            schema: {},\r\n            configuration: {\r\n                AWSRegion: \"us-west-2\",\r\n                AWSBucketName: 'k2-public-bucket',\r\n                AWSAccessKey: 'AKIATUIIRTY64EH3H5QA',\r\n                AWSSecretKey: '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'\r\n            }\r\n        }\r\n    ))\r\n\r\n    // t.deepEqual(result, {}) -fill this out when we know what the result will be.\r\n\r\n})\r\n\r\nclass XHR {\r\n    public onreadystatechange: () => void;\r\n    public readyState: number;\r\n    public status: number;\r\n    public responseText: string;\r\n    private recorder: { [key: string]: any };\r\n\r\n    constructor(xhr) {\r\n        xhr = this.recorder = {}; this.recorder.headers = {};\r\n        console.log('Starting XHR Test');\r\n    }\r\n    open(method: string, url: string) { this.recorder.opened = { method, url }; }\r\n    setRequestHeader(key: string, value: string) { this.recorder.headers[key] = value; }\r\n\r\n    async send(payload) {\r\n        const request = require('request')\r\n        const options = { method: this.recorder.opened.method, url: this.recorder.opened.url, headers: this.recorder.headers, body: payload };\r\n        let promise = new Promise((resolve, reject) => {\r\n            try {\r\n                request(options, (error, res, body) => {\r\n                    if (error) { console.error(\"error inside request:\" + error)\r\n                    return } this.responseText = body;\r\n                    this.readyState = 4; this.status = 200; this.onreadystatechange(); resolve()\r\n                    delete this.responseText;\r\n                });\r\n            } catch (err) {\r\n                console.log(\"error outside request\" + err); reject()\r\n            }\r\n        }).catch((err) => { console.log(\"Promise Error:\" + err); });\r\n        // let v = await promise;\r\n    }\r\n}\r\n\r\n// test('describe returns the hardcoded instance', async t => {\r\n//     let schema = null;\r\n//     mock('postSchema', function(result: any) {\r\n//         schema = result;\r\n//     });\r\n\r\n//     await Promise.resolve<void>(ondescribe({\r\n//         configuration: {}\r\n//     }));\r\n\r\n//     t.deepEqual(schema, {\r\n//         objects: {\r\n//             \"todo\": {\r\n//                 displayName: \"TODO\",\r\n//                 description: \"Manages a TODO list\",\r\n//                 properties: {\r\n//                     \"id\": {\r\n//                         displayName: \"ID\",\r\n//                         type: \"number\"\r\n//                     },\r\n//                     \"userId\": {\r\n//                         displayName: \"User ID\",\r\n//                         type: \"number\"\r\n//                     },\r\n//                     \"title\": {\r\n//                         displayName: \"Title\",\r\n//                         type: \"string\"\r\n//                     },\r\n//                     \"completed\": {\r\n//                         displayName: \"Completed\",\r\n//                         type: \"boolean\"\r\n//                     }\r\n//                 },\r\n//                 methods: {\r\n//                     \"get\": {\r\n//                         displayName: \"Get TODO\",\r\n//                         type: \"read\",\r\n//                         inputs: [ \"id\" ],\r\n//                         outputs: [ \"id\", \"userId\", \"title\", \"completed\" ]\r\n//                     },\r\n//                     \"getParams\": {\r\n//                         displayName: \"Get TODO\",\r\n//                         type: \"read\",\r\n//                         parameters: {\r\n//                             \"pid\" : { displayName: \"param1\", description: \"Description Of Param 1\", type: \"number\"} \r\n//                         },\r\n//                         requiredParameters: [ \"pid\" ],\r\n//                         outputs: [ \"id\" ]\r\n//                     }\r\n//                 }\r\n//             }\r\n//         }\r\n//     });\r\n\r\n//     t.pass();\r\n// });\r\n\r\n// test('execute fails with the wrong parameters', async t => {\r\n//     let error = await t.throwsAsync(Promise.resolve<void>(onexecute({\r\n//         objectName: 'test1',\r\n//         methodName: 'unused',\r\n//         parameters: {},\r\n//         properties: {},\r\n//         configuration: {},\r\n//         schema: {}\r\n//     })));\r\n\r\n//     t.deepEqual(error.message, 'The object test1 is not supported.');\r\n\r\n//     error = await t.throwsAsync(Promise.resolve<void>(onexecute({\r\n//         objectName: 'todo',\r\n//         methodName: 'test2',\r\n//         parameters: {},\r\n//         properties: {},\r\n//         configuration: {},\r\n//         schema: {}\r\n//     })));\r\n\r\n//     t.deepEqual(error.message, 'The method test2 is not supported.');\r\n\r\n//     t.pass();\r\n// });\r\n\r\n// test('execute passes with method params', async t => {\r\n//     let result: any = null;\r\n//     function pr(r: any) {\r\n//         result = r;\r\n//     }\r\n\r\n//     mock('postResult', pr);\r\n\r\n//     await Promise.resolve<void>(onexecute({\r\n//         objectName: 'todo',\r\n//         methodName: 'getParams',\r\n//         parameters: {\r\n//             pid: 456\r\n//         },\r\n//         properties: {},\r\n//         configuration: {},\r\n//         schema: {}\r\n//     }));\r\n\r\n//     t.deepEqual(result, {\r\n//         id: 456\r\n//     });\r\n\r\n//     t.pass();\r\n// });\r\n\r\n// test('execute passes', async t => {\r\n\r\n//     let xhr: {[key:string]: any} = null;\r\n//     class XHR {\r\n//         public onreadystatechange: () => void;\r\n//         public readyState: number;\r\n//         public status: number;\r\n//         public responseText: string;\r\n//         private recorder: {[key:string]: any};\r\n\r\n//         constructor() {\r\n//             xhr = this.recorder = {};\r\n//             this.recorder.headers = {};\r\n//         }\r\n\r\n//         open(method: string, url: string) {\r\n//             this.recorder.opened = {method, url};   \r\n//         }\r\n\r\n//         setRequestHeader(key: string, value: string) {\r\n//             this.recorder.headers[key] = value;\r\n//         }\r\n\r\n//         send() {\r\n//             queueMicrotask(() =>\r\n//             {\r\n//                 this.readyState = 4;\r\n//                 this.status = 200;\r\n//                 this.responseText = JSON.stringify({\r\n//                     \"id\": 123,\r\n//                     \"userId\": 51,\r\n//                     \"title\": \"Groceries\",\r\n//                     \"completed\": false\r\n//                 });\r\n//                 this.onreadystatechange();\r\n//                 delete this.responseText;\r\n//             });\r\n//         }\r\n//     }\r\n\r\n//     mock('XMLHttpRequest', XHR);\r\n\r\n//     let result: any = null;\r\n//     function pr(r: any) {\r\n//         result = r;\r\n//     }\r\n\r\n//     mock('postResult', pr);\r\n\r\n//     await Promise.resolve<void>(onexecute({\r\n//         objectName: 'todo',\r\n//         methodName: 'get',\r\n//         parameters: {},\r\n//         properties: {\r\n//             \"id\": 123\r\n//         },\r\n//         configuration: {},\r\n//         schema: {}\r\n//     }));\r\n\r\n//     t.deepEqual(xhr, {\r\n//         opened: {\r\n//             method: 'GET',\r\n//             url: 'https://jsonplaceholder.typicode.com/todos/123'\r\n//         },\r\n//         headers: {\r\n//             'test': 'test value'\r\n//         }\r\n//     });\r\n\r\n//     t.deepEqual(result, {\r\n//         id: 123,\r\n//         userId: 51,\r\n//         title: \"Groceries\",\r\n//         completed: false\r\n//     });\r\n\r\n//     t.pass();\r\n// });"],"names":["mock","name","value","global","test","async","r","XHR","Promise","resolve","onexecute","objectName","methodName","properties","parameters","schema","configuration","AWSRegion","AWSBucketName","AWSAccessKey","AWSSecretKey","constructor","xhr","this","recorder","headers","console","log","open","method","url","opened","setRequestHeader","key","payload","request","require","options","body","reject","error","res","responseText","readyState","status","onreadystatechange","err","catch"],"mappings":"uFAIA,SAASA,EAAKC,EAAcC,GACxBC,OAAOF,GAAQC,qEAGnBE,EAAK,yBAA0BC,MAAAA,IAI3BL,EAAK,uBADOM,OAGZN,EAAK,iBAAkBO,SAEjBC,QAAQC,QAAcC,UACxB,CACIC,WAAY,SACZC,WAAY,UACZC,WAAY,KACD,gBACS,QACR,QACA,gBACQ,IAEpBC,WAAY,GACZC,OAAQ,GACRC,cAAe,CACXC,UAAW,YACXC,cAAe,mBACfC,aAAc,uBACdC,aAAc,iDAS9B,MAAMb,EAOFc,YAAYC,GACFC,KAAKC,SAAW,QAASA,SAASC,QAAU,GAClDC,QAAQC,IAAI,qBAEhBC,KAAKC,EAAgBC,QAAoBN,SAASO,OAAS,CAAEF,OAAAA,EAAQC,IAAAA,GACrEE,iBAAiBC,EAAa/B,QAAsBsB,SAASC,QAAQQ,GAAO/B,aAEjEgC,SACDC,EAAUC,QAAQ,WAClBC,EAAU,CAAER,OAAQN,KAAKC,SAASO,OAAOF,OAAQC,IAAKP,KAAKC,SAASO,OAAOD,IAAKL,QAASF,KAAKC,SAASC,QAASa,KAAMJ,GAC9G,IAAI1B,QAAQ,CAACC,EAAS8B,SAE5BJ,EAAQE,EAAS,CAACG,EAAOC,EAAKH,KACtBE,EAASd,QAAQc,MAAM,wBAA0BA,SACvCE,aAAeJ,OACxBK,WAAa,OAAQC,OAAS,SAAUC,qBAAsBpC,WAC5Dc,KAAKmB,gBAElB,MAAOI,GACLpB,QAAQC,IAAI,wBAA0BmB,GAAMP,OAEjDQ,MAAOD,IAAUpB,QAAQC,IAAI,iBAAmBmB"}